'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/core/','title':"Core Platform",'section':"Docs",'content':"VMware vCloud® Architecture Toolkit™ for Service Providers The VMware Cloud Provider™ Program is an ecosystem of over 4,000 service providers located in more than 100 countries across the globe, offering VMware based cloud services. These local providers protect data sovereignty while also providing a wide range of differentiated cloud services and market expertise through specialized compliance and regional certifications.\nAs the IT landscape rapidly changes through the growth of the mega cloud service providers, cost reduction pressures, focus on time to market, and employee empowerment are compelling VMware Cloud Providers to develop innovative strategies to address these challenges.\nFor many small and mid-market service providers, the cloud approach to service delivery has become a key area requiring new attention. The abstraction of compute, network, and storage infrastructure is the foundation of cloud. However, making these components accessible and available to the needs of the traditional application and container stacks is the new challenge being faced.\nIn addition, service providers faced with increasingly constrained operational expense budgets are demanding greater operational efficiency from their infrastructure. The trusted multitenancy model through VMware vCenter Server® directly addresses this issue through the pre-integrated single pane of management offered to tenants.\nThis paper describes two methods of providing this accessibility to consumers and applications: through a dedicated vCenter Server system and VMware vSphere® infrastructure per tenant, or through a vCenter Server system with shared access for tenants.\nIn the shared model, the level of access provided to the vCenter Server system for tenants varies significantly, depending on the support model. However, to secure and maintain appropriate SLAs in this type of multitenancy VMware vCenter® architecture, six key pillars must be considered. The following figure describes these key pillars.\nIntroduction #  This paper describes two methods of providing this accessibility to consumers and applications: through a dedicated vCenter Server system and VMware vSphere® infrastructure per tenant, or through a vCenter Server system with shared access for tenants.\nIn the shared model, the level of access provided to the vCenter Server system for tenants varies significantly, depending on the support model. However, to secure and maintain appropriate SLAs in this type of multitenancy VMware vCenter® architecture, six key pillars must be considered. The following figure describes these key pillars.\nFigure 1. Six Key Multitenancy Architectural Pillars\nvCenter Server Overview #  vCenter Server is the most simple and efficient way to manage vSphere hosts. It provides unified management of all the hosts, datastores, and virtual machines (VMs) in the virtual data center from a single web console, with aggregate performance monitoring of clusters, hosts, and VMs. vCenter Server gives service providers and tenants deep insight into the status and configuration of clusters, hosts, VMs, storage, the guest OS, and other critical components of a virtual infrastructure. Other key features of vCenter Server include:\n Centralized control and visibility at every level of virtual infrastructure Proactive management of vSphere Scalable and extensible management platform with a broad partner ecosystem Dynamic allocation of resources using VMware vSphere Distributed Resource Scheduler™ (DRS) Storage maps and reports that convey storage usage, connectivity, and configuration Customizable topology views and granular role-based access control, which provide visibility into the infrastructure and assist in diagnosis and troubleshooting of issues Alerts and notifications that support entities, metrics, and events, such as host, datastore, and VM specific alarms  vCenter Server and vSphere hosts determine the user access level based on the permissions assigned to the user. The combination of user name, password, and permissions is the mechanism by which vCenter Server and vSphere hosts authenticate a tenant or service provider administrator for access and authorize the user to perform activities. vCenter Server maintains a list of authorized users and the permissions assigned to each user. Privileges define basic individual rights that are required to perform actions and read properties. vSphere and vCenter Server use sets of privileges, or roles, to control which users or groups can access particular vSphere objects. You can define different access levels for each tenant object and restrict access using these access levels. This robust permission mechanism and integration with Microsoft Active Directory guarantees authorized access to the tenant environment and its virtual machines, with responsibilities delegated to tenant administrators based on the service design.\nDedicated vCenter Server Service Design #  The dedicated vCenter Server model is one of the most common services offered by VMware Cloud Providers today.\nFigure 2. Dedicated vCenter Server\nDedicated Management vReplication\nComponents SevrCveern +te rP SC Appliance SRM Server ManNaSgeXr (S) OvRpeearalitzioen s LvoRge aInlizseig ht OvrcRheeasliztrea tor\nConsumer Managed\nNetwork Edge Firewall Load Balancing Distributed Data Security Services Services Services Firewall Services Services\nVM VM VM VM VM\nSoftware-Defined Data Center\nProvider Managed\nPhysical Resources\nA typical service description for a dedicated vCenter Server offering includes the managed support for a single-tenant dedicated vCenter Server system. This solution gives consumers more control over their environments by providing direct access to the entire inventory of their vCenter Server system to create, modify, and decommission VMs in minutes using the same tools they use on-premises, the vCenter Server user interface and APIs. This means that the service provider’s hosted VMware environment will look and feel like an extension of the customer\u0026rsquo;s data center, and therefore will often include additional VMware products, such as a dedicated VMware NSX® environment, VMware vRealize® Operations Manager™, and VMware vRealize Log Insight™ solutions.\nKey advantages to service consumers are described in the following figure.\nFigure 3. Key Advantages of a Dedicated vCenter Server System\nThese service offerings also build on the hybrid cloud model, where customers might extend their current service catalog, through vCenter Server, to manage both vSphere environments by way of a single pane of glass, using vCenter Server Enhanced Linked Mode. Whether this is a standard or advanced service offering depends on the service provider’s portfolio.\nService consumers who leverage a vCenter Server-to-vCenter Server hybrid cloud benefit from a truly dynamic infrastructure that can respond to spikes in demand in an instant, or take advantage of features such as cross-site live migration. This model gives consumers near unlimited resource, providing a new level of flexibility when it comes to short-term projects or migrations.\nFigure 4. Dedicated vCenter Server Hybrid Cloud Architecture\nAs illustrated in the previous figure, this service model employs vCenter Enhanced Linked Mode to connect two or more vCenter Server objects together, providing the ability to view and search across all linked vCenter Server systems, and to replicate roles, permissions, licenses, and other key data across systems. Enhanced Linked Mode also provides the following features to improve the quality of the end consumer operational experience:\n You can log in to all linked vCenter Server systems simultaneously with a single user name and password. You can view and search the inventories of all linked vCenter Server systems within the VMware vSphere Web Client. Roles, permission, licenses, tags, and policies are replicated across linked vCenter Server systems.  This solution simplifies a service provider’s ability to provide flexible resource consumption from an end consumer to a VMware Cloud Provider, with a particular focus on the use cases illustrated in the following figure.\nFigure 5. vCenter Server Hybrid Cloud Use Cases\nWhile the vCenter Server is dedicated, most service providers will employ a level of role-based access control (RBAC) to limit what actions their customers can perform. This provides the benefit to the service provider of always having access to perform troubleshooting activities, and maintenance and patch management. The level of restriction varies by service provider with the demarcation line between provider and consumer clearly defined in the service description and service level agreement.\nIntroduction to vCenter Server Multitenancy #  The concept of vCenter Server multitenancy is self-explanatory. In its simplest form, multitenancy is the architectural model that optimizes resource sharing, while providing sufficient levels of isolation to the individual tenants, maintaining the agreed upon Quality of Service (QoS) throughout the shared environment.\nWhile most in the industry understand the basic economics of providing a secure multitenancy environment using VMware products, increases in compliance and security requirements are driving service providers and tenants to require more than isolation as a prerequisite for doing business. However, to take advantage of the shared vCenter Server model, illustrated in the following figure, service providers must be able to support multiple tenants within the same physical infrastructure without the tenant being aware of any co-resident. The separation between tenants must be comprehensive, complete, and provide mechanisms for management, reporting, and alerting.\nFigure 6. vCenter Server Multitenancy Model\nThis vCenter Server model (illustrated here) uses a layered approach with security controls, isolation mechanisms, and monitoring controls embedded in the network, compute, and storage layers of the service stack. This layered approach provides secure access to the hosts, guarantees resources to tenants, and provides abstraction to the physical components. The VMware software-defined solutions at different layers allow the infrastructure to provide isolation of resources without dedicating a vCenter Server management platform on a per-tenant basis.\nThis design example uses three tenants. All tenants share the same vCenter Server system, while each tenant has its own virtual compute, network, and storage resources. Resources are allocated for each tenant based on their business model, requirements, and priorities. Traffic between tenants is restricted, separated, and protected through the design of the environment.\nFigure 7. Secure Multitenant Anatomy\nvCenter Server, NSX, vRealize \u0026amp; Automation Tools Single Point of vRealize, vAPI, PowerCLI… etc.\nSevrvCeern t+e rP SC vAReppplliicaanctioen SRM Server ManNagSeXr (S) OvRpeearaliztieon s LvoRge aInlizsieg ht OvrcRheeaslitzrea tor Customer A Customer B Customer C\nUsers Security Users Security Users Security\nCatalogs Policies Catalogs Policies Catalogs Policies Internet\nExternal Network -Internet\nProvider Services\nVPN Edge Gateway VPN Edge Gateway VPN Edge Gateway VM VM VM VM VM VM VM VM VM\nThe flexibility offered by these vCenter Server based service offerings helps address the challenges facing service providers, including rapidly changing IT landscapes, cost reduction pressures, and focus on time to market.\nThis type of service offering (shown in the preceding figure) can often be delivered through an IT as a service (ITaaS) model. The ITaaS cloud-computing models, which have been developed by many VMware Cloud Providers to address particular customer use cases, offer a new level of automation and security to successfully achieve application stack autonomy and customer business objectives. ITaaS offers compute resources, operating systems, networking, and storage to client environments. With ITaaS, tenants are typically responsible for all operations and administration, and for configuration of their environment beyond the baseline deployment.\nIn addition, many VMware Cloud Providers are developing cloud service offerings for public and internal tenant applications, regardless of whether the focus is on public or private cloud services. Typically, these pursuits focus on the following objectives:\n Increase operational efficiency through cost-effective use of expensive infrastructure Drive up economies of scale through shared resourcing Rapid and agile deployment of customer environments or applications Improve service quality and accelerate delivery through standardization Promote green computing by maximizing efficient use of shared resources, and therefore lowering energy consumption  Achieving these goals can have a profound, positive impact on profitability, productivity, and product quality. However, leveraging a shared vCenter Server system or shared infrastructure model in a cloud services architecture introduces additional challenges, hindering widespread adoption where end tenants demand a securely isolated application or environment and require a highly flexible management platform.\nvSphere with vCenter Server provides secure separation through the inherent security of its own internal software architecture and the capabilities it provides to logically segment tenant assets and resources\nthrough its management interfaces. In the shared vCenter Server model, sharing vSphere hosts among tenants is inherently challenging at a number of different levels. If the service provider’s end goal is to maximize resource utilization through the sharing of host resources across tenants, VMware vCloud Director® for Service Providers is the primary design option. vCloud Director and the additional layer of abstraction it offers to facilitate the sharing of host resources while achieving secure multitenancy is described in Section8, VMware vCloud Director for Service Providers.\nIn the architecture illustrated inFigure 7, the construct most commonly adopted VMware Cloud Providers, for the sharing of a vCenter Server platform, is the use of the logical data center object within the vCenter Server inventory. For the segmentation and isolation of tenants, this is the primary design choice for a number of reasons.\nUnlike a folder, which is used to organize a specific object type, the data center object is an aggregation of all the different types of objects needed to do work in the virtual infrastructure: hosts, virtual machines, networks, and datastores. The data center defines the namespace for networks and datastores, and the names for these objects must be unique within a data center. For example, you cannot have two datastores with the same name within a single data center, but you can have two datastores with the same name in two different data centers. Virtual machines, templates, and clusters need not be unique within the data center, but must be unique within their folder. In addition, the data center object in vCenter Server creates artificial limits on the operational abilities of the tenants.\nThere are also several other reasons to use the data center object in a shared vCenter Server design over folders. For instance, while a folder object can contain sub-objects, because the physical hosts are dedicated to the tenant, these sub-objects are best placed within a data center object. The reason for this is, if you switch views in the vSphere Web Client to the Storage View, you will see datastores and datastore clusters contained within the data center. You can create folders in vCenter Server, but they are restricted to that view. Likewise, if you switch to the Networking View, data centers are the containers used for VMware vSphere Distributed Switch™ instances and port groups.\nThe preference for the data center object over the use of folders becomes obvious when you understand where the network and storage boundaries are (and by association, host boundaries). If you elect to only use folders, the design must include far more complex operational processes to prevent problems, and verify that secure multitenancy is maintained. Therefore, the design recommendation is to use the data center objects for tenant isolation purposes.\nAs a result of this key design factor, a shared vCenter Server model requires a number of characteristics and design specifications, which are outlined as follows:\n Although it supports multitenancy, data center objects, clusters, hosts, and storage are not shared across multiple tenants. In the shared vCenter Server deployment, each customer is treated as a tenant, or for a large enterprise deployment, each individual department in the enterprise is treated as a tenant. The data center object is a tenant-specific resource, so all the clusters and hosts inside the data center object are also tenant-specific resources. The service provider administrator must be able to control which tenant can access the vCenter Server system, data center objects, clusters, hosts, and storage of the shared vCenter system. When the service provider administrator creates the vCenter Server system (for the first time), all the data centers objects, clusters, hosts, and storage in that vCenter Server system do not belong to any tenant until the service provider administrator assigns the appropriate access control lists (ACLs). The service provider does not support moving of data center objects across tenants. The service provider does not support moving of clusters and hosts across data center objects. The service provider does not support moving of a host from one cluster to another or making it non- clustered. Tenant administrators must be able to use the hosts and clusters from the shared vCenter Server platform as it pertains to the service description. The data center objects, clusters, and hosts that are not part of the tenant\u0026rsquo;s resources will not be visible to that tenant.  vCenter Server Multitenancy Elements #  As outlined previously, to develop a secure and trusted multitenancy service model with vCenter Server, isolation and service assurance are the primary concerns. The “trusted” portion of the model relates to the visibility and control offered to the tenants to verify the environment. To support these fundamental requirements, the trusted multitenant model on the vCenter Server platform must be built on six foundational elements as shown in the following graphic.\nFigure 8. Six Elements of the Shared vCenter Platform\nDesign Considerations for Secure Separation #  The first element is secure separation. Secure separation refers to the effective segmentation and isolation of tenant’s assets and resources within the multitenant environment. Without secure separation, a trusted multitenant vCenter Server environment cannot exist.\nFigure 9. Secure Separation Design Considerations\nService assurance plays a critical design role in a shared vCenter Server architecture, providing tenants with a consistent, enforceable, and reliable service level. In a multitenant vCenter Server environment, the service provider must manage virtual resources to accommodate the growth and changing business needs of all tenants. Service level agreements (SLAs) define the level of service agreed upon by tenants and the service provider. Service assurance plays a key role to make sure that tenants receive the agreed upon level of service from network, compute, and storage resources.\nA number of methods are available to service providers to deliver consistent SLAs across the network, compute, and storage components of the shared vCenter Server platform, including QoS, limits, and vSphere DRS. However, without the correct mix of service assurance features and capabilities, which are built into vCenter Server and vSphere components, maintaining uptime, throughput, quality of service, and availability SLAs can be challenging.\nFigure 10. Service Assurance Design Considerations\nDesign Considerations for Security and Compliance #  The third element, security and compliance, provides the confidentiality, integrity, and availability of each tenant’s environment at every layer of the VMware stack, using technologies like VMware vCenter Single Sign-On identity management and role-based access control, encryption, key management, firewalls, malware protection, and intrusion prevention. This is a key design factor pertinent to both service provider and tenant.\nThe shared vCenter Server solution must verify that all activities performed in the provisioning, configuration, and management of the multitenant environment, as well as day-to-day activities and events for individual tenants, are verified and continuously monitored. It is also important that all operational events are recorded and that these records are available as evidence during audits. vRealize Log Insight provides the functionality to meet this design requirement.\nFigure 11. Security and Compliance Design Considerations\nIn addition, as regulatory compliance expands, the shared vCenter Server environment will become increasingly subject to security and compliance standards, such as PCI DSS, HIPAA, and SOX (GLBA). With the proper tools, achieving and demonstrating compliance is not only possible, but it can often become easier to accomplish than in a non-virtual environment.\nDesign Considerations for Availability and Data Protection #  Resources and data must be available for use by the tenant. High availability means that resources such as network bandwidth, memory, CPU, or data storage are always online and available to users when needed. Redundant systems, configurations, and architecture can minimize or eliminate points of failure that adversely affect availability to the tenant.\nData protection is a key ingredient in a resilient architecture. Cloud computing imposes a resource tradeoff between high performance, and the requirements of increasingly robust security and data classification are an essential tool for balancing that equation. End customers need to know what data is important and where it is located as a prerequisite to making performance cost-benefit decisions, as well as maintaining focus on the most critical areas for data loss prevention procedures.\nFigure 12. Availability and Data Protection Design Considerations\nDesign Considerations for Tenant Management and Control #  The fifth element is tenant management and control. In every shared vCenter Server model there are elements of control that the service provider will delegate to the tenant. Reasons for delegation of control include convenience, new revenue opportunities, security, compliance, or tenant requirement. In all cases, the goal of the shared vCenter Server model is to allow for and simplify the management, visibility, and reporting of this delegation.\nTenants must only have control over relevant portions of their service. Specifically, tenants must be able to provision allocated resources, manage the state of all virtualized objects, and view resource status and performance metrics for all parts of their infrastructure. In addition, where possible through third-party plug-ins into vCenter Server, tenants taking advantage of data protection or data backup services must be able to manage this capability on their own, including setting schedules and backup types, initiating jobs, and running reports.\nThis tenant-in-control model allows tenants to dynamically change the environment to suit their workloads as resource requirements change within the constructs defined by the service provider.\nFigure 13. Tenant Management and Control Design Considerations\nDesign Considerations for Service Provider Management and Control #  The sixth and final element that must be included as a key design factor in the shared vCenter Server model is service provider management and control. One goal of a trusted multitenant vCenter Server architecture is to simplify management of resources at every level of the infrastructure and to provide the functionality to provision, monitor, troubleshoot, and charge back the resources used by tenants. The management of shared vCenter Server multitenant environments comes with challenges, from reporting and alerting to capacity management and tenant control delegation. vCenter Server helps address these challenges by providing a scalable management solution that is tightly integrated into the infrastructure. In addition, vCenter Server provides a rich, fully developed API stack for adding additional service provider value.\nVMware Cloud Providers of infrastructure services in a shared vCenter Server multitenant environment require comprehensive control and complete visibility of the shared infrastructure to provide the availability, data protection, security, and service levels expected by tenants. The ability to control, manage, and monitor resources at all levels of the infrastructure requires a dynamic, efficient, and flexible design that allows the service provider to access and provision compute, storage, and network resources from the VMware software-defined data center components quickly, easily, and with minimal effort.\nvCenter Server simplifies resource planning for both cloud and tenant environments by displaying detailed CPU and memory allocation at a range of different levels. A service provider administrator can use information provided at the root, data center, or cluster level to get an overview of CPU and memory resources allocated to infrastructure virtual machines and individual tenants. A tenant can use information provided at the data center, or more granular objects level, to get an overview of CPU and memory resource allocated to the virtual machines and their workloads.\nPerformance charts in vCenter Server provide a single view of all performance metrics at both the data center, cluster, and individual object levels. Information such as CPU, memory, disk, and network can be seen without navigating through multiple charts. Performance charts include aggregated charts that show high-level summaries of resource distribution, which helps administrators identify top tenants. Thumbnail views of virtual machines, hosts, resource pools, clusters, and data stores allow easy navigation to individual charts.\nVMware NSX #  VMware NSX provides security and networking solutions for virtual data centers and cloud environments. The NSX product helps strengthen application and data security, further enabling the shared vCenter Server model to improve visibility and control, and accelerate IT compliance efforts across the tenants’ organization. This allows NSX to be used by the service provider to create a multitenant topology by segmenting networks, providing isolation of network resources, logical routing, network security policies, firewalling, and advanced load balancing features.\nAs illustrated in the following figure, through appropriate design, high-scale multitenancy is enabled with multiple tiers of VMware NSX Edge™ devices interconnected through VxLAN transit uplinks. Two tiers of NSX Edge devices support the required scaling, while maintaining a level of administrative control, with top-tier NSX Edge devices acting as a provider edge managed by the service provider administrator, and a second tier of NSX Edge devices provisioned and managed by the tenants.\nThe provider edge can scale up to 8 ECMP edges for scalable routing. Depending on the tenants’ requirements, the tenant edges can be ECMP or stateful. In addition, as discussed in the next section, this architecture supports overlapping IP addresses between tenants connected to different first-tier NSX Edge devices, and NSX distributed firewall (DFW) rules in a multitenancy environment.\nFigure 14. Multitenant vCenter Server NSX Architecture\nAs the preceding figure shows, in this example each tenant’s virtual network consists of VxLAN logical switches, a NSX distributed logical router (DLR), and an NSX Edge services gateway.\nThe per-tenant DLR is predominantly employed to improve the efficiency of east-west routing within the tenant’s segments (web and DB segments in this example). Each tenant employs an edge services gateway (ESG) for north-south routing and for the tenant to leverage other network services such as NAT, firewall, and load balancers.\nThe provider edge will employ a “trunk” interface to allow the creation of many sub-interfaces on the single NSX Edge device, and establish peering with separate DLR instances on each sub-interface.\nThe aggregation edge gateways must use route import policies to make sure the tenant edge gateways advertise only the appropriate routes.\nOverlapping Tenant IP Addresses and NAT #  An additional design factor in the shared vCenter Server model is a scenario where the tenants are controlling their own IP addressing for their VMs, and therefore there is a chance that the tenants’ IP address ranges are going to overlap one another. If two tenants happen to use the same IP addressing to support this scenario, Network Address Translation (NAT) must be performed on each tenant’s ESG to translate the tenants’ IP addresses to uniquely accessible IP addresses.\nIn the following figure, each tenant has been assigned a unique IP address by the service provider within the range of its ESG’s uplink to ESG-AGGREGATION: Tenant1: 80.80.80.0/28 and Tenant2: 80.80.80.16/28.\nIf these are the publicly accessible IP addresses assigned to each tenant, which can be reached by its client on the internet, then the tenant will use this IP address range to publish its services to its client on the internet. As illustrated in the following graphic, each of the tenants has a web application running on the WEB VM that needs to be accessed by its client.\nNAT must be performed by each tenant ESG. The NAT is essentially a DNAT (Destination NAT) that translates the destination IP address of incoming traffic to IP addresses of the WEB VM.\nThe orange portions of the following figure illustrate the DNAT on ESG-Tenant1 and the traffic flow when a client is accessing Tenant1’s web application.\nFigure 15. Overlapping IP Multitenancy\nThe red portions of the graphic illustrate the DNAT on ESG-Tenant2 and the traffic flow when a client is accessing Tenant2’s web application.\nEach tenant has its own ESG. Each ESG is predominantly employed to furnish north-south routing and provide a perimeter firewall for each tenant. Of course, other network services, such as load balancing, can also be activated on the ESG when needed by the tenants. Finally, each VM is fronted with a firewall at its vNIC. This firewall is provided by the distributed firewall (DFW) feature in NSX.\nNetwork multitenancy through the use of NSX can be achieved in the design of your virtual network, within the shared vCenter Server architecture. The use of a distributed logical router (stand-alone or HA) and an NSX Edge gateway per tenant, together with the creation of a backbone network where the tenant network connects to an aggregation edge cluster (HA or ECMP) that then connects back to the outside network, can provide the network and network services isolation required for a multitenant vCenter Server architecture. In this example, the network policies reside on the edge gateway and the distributed logical router per tenant, giving tenants full control over their own network.\nHowever, limitations in the role-based access control provided by NSX means that service design is critical, and the demarcation line of actions performed by the provider and tenant needs to be examined as part of the service design and delivery model.\nA final consideration on the topic of NSX in a shared vCenter Server design is that these functions are enabled out-of-the-box when architecting a multitenant environment with vCloud Director for Service Providers, simplifying the architecture and operations and reducing time to market.\nUnderstanding vCenter Server Role-Based Access Control #  One key service design consideration in a shared vCenter Server environment is determining who can use vCenter Server, and what tasks those tenant users are authorized to perform. vCenter Server has a built-in role-based access control mechanism for tenant access and authorization.\nRBAC is the security mechanism that can greatly lower the cost and complexity of shared vCenter Server security administration. RBAC simplifies security operations by using roles, hierarchies, and constraints to organize privileges. vCenter Server offers flexible role-based access control to define the roles and privileges for different tenant administrators within the vCenter Server environment.\nRoles and privileges in the vCenter Server system can easily be modified and new roles quickly created. Service provider administrators can focus on defining policies needed by their tenants to provision compute infrastructure and network connectivity while provider and tenant collaborate on strategic architectural and security issues. Meanwhile, the implementation of basic server configuration can be automated.\nFigure 16. Role-Based Access Control Architecture\nvCenter Server provides centralized authentication and authorization services at many different levels within its inventory, using user and group rights with roles and privileges. vCenter Server features five main components for managing RBAC. Key concepts in this system are described in the following figure.\nFigure 17. Key Role-Based Access Control Concepts\nIf proper role-based access controls are not in place within a shared vCenter Server environment, virtual machines will be vulnerable, because any user with access to the vSphere client can delete or modify the guest operating systems or make changes to other inventory objects, like folders, resource pools, and datastores.\nIn addition, roles can be customized to include or exclude any of the privileges in vCenter Server. vCenter Server comes with predefined roles. However, you can also customize roles to meet your specific service design and operational needs. vCenter Server predefined roles determine what actions a user or group is allowed to take within vCenter Server nodes across the infrastructure (where a single SSO authentication domain exists) or potentially, directly on VMware ESXi™ hosts, depending on whether or not the hypervisors are domain joined or not. Some roles have one or more privileges, while others have no privileges at all.\nThree of the predefined roles are permanent, meaning that you cannot change the privileges associated with these roles. These permanent roles are available to a standalone ESXi server, or to a vCenter Server system. The remaining are sample roles that can be modified as needed. Note that since the release of ESXi 5.1, the creation of custom local groups is not supported on the host directly.\nThe following table describes the pre-established roles. Table 1. Predefined Roles\n   Roles Role Type Description     No Access Permanent A role that is assigned to new users and groups. Prevents a user      or group from viewing or making changes to an object. Read-Only Permanent A role that allows users to check the state of an object or view its\ndetails, but not make changes to it. Administrator Permanent A role that enables a user complete access to all of the objects\non the server. At least one user must have administrative permissions in VMware. Virtual Sample Role A role that grants a user access rights to only virtual machines. Machine The user can alter the virtual hardware or create snapshots of Power User the VM. Virtual Sample Role Grants user access rights exclusively to VMs. The user can Machine power on, power off, and reset the virtual machine, as well as User run media from the virtual discs. Resource Sample Role Allows the user to create resource pools (RAM and CPU\nPool reserved for use) and assign these pools to virtual machines. Administrator VMware Sample Role Required to allow VMware Consolidated Backup to run (legacy Consolidated role).\nBackup User Datastore Sample Role Allows the user to consume space on a datastore. Consumer Network Sample Role Allows the user to assign a network to a virtual machine or a Consumer host. Note When you assign a user permission to manage only a specific VM, when they log into vCenter\nServer, they will only see the data center object and that VM (unless permissions have been specifically applied to a higher level). They will not see any other VMs, the ESXi host that the VM is on, clusters, resource pools, and so on.\nFigure 18. vCenter Server Default Roles\nThe privileges assigned to a predefined role are more comprehensive than described in the previous table, so if you want to know exactly what permissions a role provides to a user, you can view the selected privileges when assigning the role to a user or group.\nVMware automatically allows users access to child objects. For example, if a user has been given read- only rights for a folder, that user will have read-only rights for all of the sub-folders as well. You can disable this setting by selecting do not propagate when allocating roles.\nYou can change the privileges associated with the predefined roles. Before editing a role, however, VMware recommends that you clone the role first to maintain the default sample roles for future use. It’s a simple task to clone or create a new set of customized roles that map specifically to the requirements of the service provider. For example, you can create custom roles such as one for providing access for rebooting the virtual machines to a particular user. Additional examples of custom roles are described in Section6.2, Examples of Shared vCenter Server Service Roles .\nBest Practices for Shared vCenter Server RBAC Design #  The following is a list of common and best practices for configuring role-based access control within a shared vCenter Server architecture:\n Any permissions granted to a user account for vCenter Server access must be a privileged account. All permissions are assigned to AD groups, not user accounts. Do not use local accounts or groups. Grant permissions only where needed. Using the minimum number of permissions makes it easier to understand and manage the permissions structure of each tenant. Create new groups for vCenter Server tenant and service provider users. Avoid using Windows built- in groups or other existing groups. If you assign a restrictive role to a group, check that the group does not contain the Administrator user or other users with administrative privileges. Otherwise, you could unintentionally restrict administrators' privileges in parts of the inventory hierarchy where you have assigned that group the restrictive role. Use data center objects or folders to group objects to correspond to tenants, differing the permissions you want to grant for them. Use caution when granting a permission at the root vCenter Server level. Users with permissions at the root level have access to global data on vCenter Server, such as roles, custom attributes, vCenter  Server settings, and licenses. Changes to licenses and roles propagate to all vCenter Server systems in an Enhanced Linked Mode group, even if the user does not have permissions on all of the vCenter Server systems in the group.\n In most cases, enable propagation on permissions. This provides that when new objects are inserted into the inventory hierarchy, they inherit permissions and are accessible to tenant admins and users. Use the No Access role to mask specific areas of the hierarchy that you do not want particular tenant administrators and users to have access to. Certain privileges can be harmful to hosts and should be assigned to tenants only when required. This includes any privilege that allows a user to delete, rename, remove, or create items that can cause data loss or datastores to be filled up. This can cause a denial of service attack on your VMs (for instance, prevent snapshot creation). Create roles that are customized to tenant requirements. For example, to create a role for an operations team that is responsible for monitoring VMs, create one that allows VM interactions only (for instance, power on, power off, reset, and console interaction). This allows team members to look at the console of a VM to see what is happening and power-cycle a VM. Assign the datastore low-level file operations privilege sparingly. This privilege allows users to upload and download files to a host datastore and can create a security risk.  Other potentially dangerous privileges are in the network and distributed virtual switch categories, which can allow a user to move a VM to any available virtual LAN that is configured on your virtual switches. This can be particularly risky if you have public and private network virtual switches on a host where you definitely do not want a VM moved between them or connected to both at the same time. Assigning the network privileges to your tenant administrators and denying them to everyone else is a good practice.\nExamples of Shared vCenter Server Service Roles #  The following table includes some examples of service provider and tenant vCenter Server roles that can be adopted to enforce customized RVAC and delegation of duties within a shared vCenter Server service that requires a wide range of operational administrator duties for tenants.\nTable 2. Examples of Shared vCenter Server Service Roles \nvCenter Server Objects Propagate Role Type Description Role Applied to\n   Tenant Administrator Data center object or cluster Yes Custom Role This is a custom role that grants permissions required to manage the tenant’s resources. All permissions other than ones that affect global roles, data center creation, and vCenter Server configuration.     Virtual Machine User Data center object, folders, VMs Yes Sample Role This is a built-in VMware role that grants the abilities to access the console of the VM, attach a floppy/CD to the VM, and power on/off/reboot the VM.   Virtual Machine Administrator Data center object, folders, VMs Yes Custom Role This is a custom role that allows a user total control of a virtual machine or a host, up to and including removing that VM or host.   Console User Folders, VMs No Custom Role This is a custom role that grants users console-only access of a virtual machine.    Note It is often quicker to clone an existing role and modify the permissions as opposed to creating a new role and starting from scratch. However, both options exist and are equally valid when implementing a shared vCenter Server RBAC solution.\nThere are also a few other things to keep in mind when configuring access controls for tenants in vCenter Server. First, if a group is assigned a role, all the users in that group are given those same privileges unless the users have roles of their own already assigned. Second, if a user is assigned privileges in VMware, those privileges take precedence over the privileges of the group.\nVMware vCenter Single Sign-On #  The VMware vCenter Single Sign-On role is integrated into the VMware Platform Services Controller™ component of vCenter Server, and provides an authentication broker and a security token exchange. The aim of the vCenter Single Sign-On is to provide a secure, centralized way of accessing a mixed vSphere solution with multiple vCenter Server instances as well as other VMware products.\nvCenter Single Sign-On is used to form the authentication domain in a vSphere infrastructure. When the user logs into vCenter Server, either through the vSphere Web Client or an API, they first connect with the SSO server, which will typically be integrated to a directory service such as Microsoft Active Directory. When logging in, a SAML 2.0 token is generated for that user, which is then exchanged as user credentials for that user to log into vCenter Server.\nvCenter Server also validates the users and groups in Windows Active Directory against the users and groups in vCenter Server through SSO. Therefore, if a user or group exists in vCenter Server, but does not exist in the domain, VMware will delete the permissions associated with the user or group during validation.\nIt is important to recognize that without an operational SSO service there will be no access to vCenter Server. Therefore, it is the first component that needs to be designed and implemented to achieve a stable mechanism to gain access to the shared vCenter Server infrastructure. For this reason, Platform Services Controller high availability is a key design factor required to provide consistent and reliable access to the platform.\nHost-Based Authentication #  While this is unlikely to be employed by a service provider to give host access to tenants, it is worth highlighting that ESXi hosts can be Domain Joined by service provider administrators to allow for centralized authentication and RBAC. Auditing for such a solution can be provided by vRealize Log Insight.\nMetering and Chargeback Design #  There are multiple models employed by service providers to meter and invoice end consumers. For instance, both the vCenter Server design options discussed in this paper have relied upon a dedicated host hardware model. While other physical resources might be shared, such as network switches or array-based storage, the ESXi host server resources are only being consumed by a single tenant. Where this is the case, the service provider might invoice their customers based on the host hardware being consumed, rather than actual CPU and memory resource being utilized, because those metrics become largely irrelevant, other than perhaps power consumption. Pricing and packaging models, like those illustrated in the following figure, are commonplace among many of the service providers who provide both dedicated and shared vCenter Server service offerings.\nFigure 19. Dedicated vCenter Server Example Pricing and Packaging\nDisclaimer: The pricing and packing shown here are fictitious, and not based on any service providers P\u0026amp;P model.\nHowever, there is also an alternate means of billing customers, which might provide a more agile or deterministic approach to pricing and packaging. VMware vRealize Business™ for Cloud is an end-to-end cost reporting solution for virtual environments that enables accurate cost measurement, analysis, and reporting of virtual machines using vSphere. Virtual machine resource consumption data is collected from vCenter Server, providing the most complete and accurate tabulation of resource costs. Integration with vCloud Director and NSX also enables automated chargeback for private and public cloud environments.\nThe key features required when designing a metering solution that provides the most complete and accurate tabulation of resource costs include the following:\n Map IT cost to business units, cost centers, or external consumers, thereby enabling a better understanding of how much resources cost and what can be done to optimize resource utilization. Support for policy-driven accountability for self-service environments so that business owners can pay as they go for cloud resources. Support for allocation-based costing, utilization-based costing, or a combination of both to fit a service provider’s unique costing policies. Allow consumers to baseline costs, have fixed costs, one-time costs, multiple rate factors, and over usage fees to model true costs. Meter all resources managed in vCenter Server, including network traffic, public IP addresses, and other services such as DHCP, NAT, and firewalling. Provide detailed reports generated for tenants to facilitate decision making and planning. Allow service providers to see the actual cost of the cloud infrastructure required to support business services. Verify that cost models can be customized to different tenants’ processes and policies.  VMware vCloud Director for Service Providers #  VMware vCloud Director gives customers the ability to build secure private clouds that dramatically increase data center efficiency and business agility. Coupled with vSphere, vCloud Director delivers cloud computing for existing data centers by pooling virtual infrastructure resources and delivering them to users as catalog-based services.\nMany of the limitations discussed in this paper regarding secure access control, isolation, and operational efficiency are addressed through the use of vCloud Director. For instance, as highlighted previously, sharing host resources across tenants provides a number of challenges from a secure tenant isolation perspective, as well as a resource management and service assurance point of view. These are the challenges that vCloud Director for Service Providers is designed to resolve. In addition, vCloud Director offers end consumers simple self-service and consumption of advanced network services (offered by NSX) through the vCloud Director user interface and API.\nFigure 20. NSX Self-Service Delivery in vCloud Director\nvCloud Director provides secure separation because administrators can group users into organizations that can represent any policy group, such as a business unit, division, or subsidiary company. Each group has isolated virtual resources, independent LDAP authentication, specific policy controls, and unique catalogs.\nThese features enable a multitenant environment with multiple organizations sharing the same infrastructure. Visibility and resource control are restricted to each organization virtual data center (VDC).\nWhen employing vCloud Director, tenant management and control is provided by a self-service portal, which provides direct access to individual tenant catalogs and virtual data centers. Tenants consume resources as a catalog-based service through a web portal and programmatic interfaces.\nFigure 21. vCloud Director Architecture\nOrganization Organization\n \nUsers Access Control Users Access Control Catalogs Provisioning Policies Catalogs Provisioning Policies\nUser Clouds User Clouds\nvApp vApp\nVM VM VM (VMs with VM VM (VMs with vApp Network) vApp Network)\nOrganization Organization VDCs VDCs\nvSphere\nvApp Network\nOrganization VDC Network Organization VDC Network Logical Switches External Networks (SDN)\n \nClusters Organization VDCs Organization VDCs Organization VDC Resource Pools\nProvider VDC: Gold Provider VDC: Silver Provider VDC: Bronze Storage Policies\nProvider Physical Resources By standardizing processes, increasing automation, and delivering IT as a service through vCloud Director, it is possible to achieve additional savings beyond virtualization, while significantly reducing the required hands-on operational maintenance of the shared vCenter Server model. In addition, standardizing service offerings can simplify IT management tasks such as troubleshooting, patching, and change management. Administrative maintenance can be eliminated and provisioning can be automated through policy-based workflows that allow authorized users to deploy preconfigured services when they need them.\nvCloud Director offers a number of benefits over the shared vCenter Server model discussed in this paper. However, there is no correct or incorrect way of offering end consumers the services and resources they require to conduct their day-to-day business. In fact, one of the key differentiators for VMware Cloud Providers is that many simply focus on the services their customers want to access, and help them build their businesses based on that trusted relationship.\nTransitioning from a Shared vCenter Server Model to vCloud #  Director\nSeveral times in this paper we have discussed the benefits of a vCloud Director-based service over that of a shared vCenter Server model. However, what are the options available to help service providers transition consumers from one model to the other? Prior to vCloud Director 8.20, this could leave service provider operational teams with a number of challenges. The Adopt a vCenter feature, new in vCloud Director 8.20, simplifies these actions significantly by discovering and assuming the management of existing vCenter Server resource pools without interruption or downtime. This feature helps import existing resources into vCloud Director, and as a result, reduces the time and expense involved in managing and scripting custom multitenancy in vCenter Server. Other benefits include the following:\n Reduced cost and time to maintain custom code required to individually manage separate, dedicated managed environments or shared vCenter Server environments Reduced cost and time for third-party integrations Enabling self-service (optional) Achieving better economies of scale  In addition to shared platforms, many “Dedicated Private Cloud” providers have realized that certain very small, dedicated micro vCenter Server environments require too much overhead to manage, and have very low margins, in that there is typically a great amount of time and expense involved in managing a dedicated environment, even if it is very small and does not generate much revenue. Therefore, as cloud services continue to become mainstream to consumers, many customers are increasingly comfortable with shared environments. For these use cases, the ability to adopt existing dedicated vCenter Server instances, discovered into vCloud Director, better aligns cost, revenue, and management overhead for these very small vCenter Server environments.\nDesign Considerations for vRealize Operations and vRealize Log #  Insight\nTwo other VMware components that often get offered alongside both dedicated and shared vCenter Server-based services are vRealize Operations Manager and vRealize Log Insight.\nvRealize Operations Manager delivers intelligent operations management across the physical, virtual, and cloud infrastructure, enabling the VMware Cloud Provider and their tenants to efficiently operate a cloud platform and meet required service level agreements (SLAs). vRealize Operations Manager correlates data from applications to storage in a unified easy-to-use management tool that provides control over performance, capacity, and configuration, with predictive analytics driving proactive policy-based automation.\nLike vCenter Server, vRealize Operations Manager can offer a variety of architectural models, depending on the service providers use case. These include:\n Shared multitenant environment with tenant and service provider access Dedicated environment with tenant access Shared and/or dedicated environment with no tenant access  Figure 22. vRealize Operations Manager Multitenancy Architecture\nOverview Dashboard Tenant 1 Tenant 1 DashboardsService\nProvider Capacity Dashboard Tenant 2 Tenant 2 DashboardsAdmin\nTenant 3 VM Configuration Workload Dashboard Common Dashboards\nFor more information on integrating vRealize Operation Manager with dedicated or shared vCenter Server services, see the Multitenant Use of vRealize Operations as a Service paper: at http://www.vmware.com/content/dam/digitalmarketing/vmware/en/pdf/vcat/vmware-multitenant-vrealize- operations-as-a-service.pdf.\nvRealize Log Insight gives service providers and tenant administrators the ability to consolidate logs, monitor, and troubleshoot vSphere and third-party infrastructure, and perform security auditing, compliance testing, log querying, aggregation, correlation, and retention. The vRealize Log Insight virtual appliance includes a syslog server, log consolidation tool, and log analysis tool that will work for any type of device that can send syslog data. vRealize Log Insight administrators can also create custom dashboards based on saved queries that can be exported, shared, and integrated with vCenter Server and vRealize Operations Manager to provide a uniform approach to dashboard monitoring and operational management.\nFor more information on integrating vRealize Log Insight with dedicated or shared vCenter Server services, see the Architecting a VMware vRealize Log Insight Solution for the VMware Cloud Provider Program paper athttp://www.vmware.com/content/dam/digitalmarketing/vmware/en/pdf/vcat/vmware- architecting-a-vmware-vrealize-log-insight-solution.pdf.\nConclusion #  The ability to deliver infrastructure services to multiple external consumers is a core component of a service provider’s business. VMware provides many opportunities for service providers to deliver secure dedicated services to multiple tenants, whether the architectural model is based on a dedicated vCenter Server platform, a shared vCenter Server platform, or a vCloud Director platform. By providing multiple trusted multitenancy options, service providers can address the key concerns of tenants in a multitenant environment: confidentiality, security, compliance, service levels, availability, data protection, and management control.\nVMware uses a layered approach, with security controls, isolation mechanisms, and monitoring controls embedded in the network, compute, and storage layers of the infrastructure. This layered approach provides secure access to the cloud resources, guaranteeing resources to tenants, and providing abstraction of the physical elements away from the tenants through the software-defined data center, which allows the infrastructure to provide logical isolation without dedicating physical resources to each tenant.\nEffective, efficient coordination and management of the vCenter Server platform and other VMware components and processes across the infrastructure are critical to delivering IaaS and the confidentiality and security of tenant data, which is a fundamental requirement of a multitenant environment. Again, the following six foundational elements form the basis of any VMware Cloud Provider Program secure multitenant model:\n Secure Separation – Provides that the resources of existing tenants remain untouched and uncompromised when new tenants are provisioned. vCenter Server, ESXi, and NSX provide secure separation methods at every layer of the shared converged infrastructure to safeguard the security and privacy of each tenant. Service Assurance – Provides tenants with consistent and reliable service levels that accommodate their growth and changing business needs. Various methods are available from VMware to deliver consistent service level agreements (SLAs) and optimize quality of service across the network, compute, and storage components of the platform. Security and Compliance – Maintains the confidentiality, integrity, and availability of each tenant’s environment. The VMware software-defined data center provides security at every layer of the shared infrastructure using technologies such as identity management and access control, encryption and key management, firewalls, malware protection, and intrusion prevention. Availability and Data Protection – Provides that resources such as network bandwidth, memory, CPU, or data storage are always online and available to tenants when needed. The VMware software-defined data center provides a secured environment by using threat detection and mitigation, including the monitoring and response to intrusions and attacks against the environment and its tenants. Tenant Management and Control – Allows tenants to change the environment to suit their workloads as resource requirements change. Service Management and Control – Simplifies management of resources at every level of the infrastructure, and provides the functionality to provision, monitor, troubleshoot, and charge for the resources used by tenants. The VMware software-defined data center platform helps address these challenges by providing scalable, integrated management solutions inherent to the infrastructure and a rich, fully developed API stack for adding additional service provider value.  VMware Cloud Providers are extensively involved in designing, testing, and validating the VMware software-defined data center with innovative technologies, platforms, and solutions at the network, compute, storage, layers. VMware Cloud Providers can use these tested solutions to deploy secure and trusted public and private clouds. By using these solutions as a reference guide, they can create a trusted infrastructure that is secure, flexible, highly functional, and interoperable to generate revenue by providing value-added services.\n"});index.add({'id':1,'href':'/docs/topicxyz/','title':"Core Platform",'section':"Docs",'content':"This is a title #  lorem ipsum color\n"});index.add({'id':2,'href':'/posts/creating-a-new-theme/','title':"Creating a New Theme",'section':"Blog",'content':"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"});index.add({'id':3,'href':'/posts/migrate-from-jekyll/','title':"Migrate to Hugo from Jekyll",'section':"Blog",'content':"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #  Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"});index.add({'id':4,'href':'/posts/goisforlovers/','title':"(Hu)go Template Primer",'section':"Blog",'content':"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "});index.add({'id':5,'href':'/posts/hugoisforlovers/','title':"Getting Started with Hugo",'section':"Blog",'content':"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"});index.add({'id':6,'href':'/docs/netsec/','title':"Netsec",'section':"Docs",'content':"-\u0026ndash; weight: 1 bookFlatSection: true title: \u0026ldquo;Networking \u0026amp; Security\u0026rdquo; #  VMware vCloud® Architecture Toolkit™ for Service Providers Architecting Tenant Networking with VMware NSX® in VMware vCloud Director®\nIntroduction #  Overview #  The VMware Cloud Provider Program is an ecosystem of over 4,000 service providers located in more than 100 countries offering VMware based cloud services. Local providers secure data sovereignty while providing a wide range of cloud services and vertical market expertise through specialized compliance and certifications.\nVMware Cloud Providers are uniquely positioned to offer their services to the market and become a seamless extension of existing VMware enterprise customers’ on-premises data centers. Managed service providers have traditionally operated data centers hosting multiple tenants and have developed reference topology models offering tenant separation while allowing the provider to offer value-add services that require access into each tenant environment from common management platforms.\nOne of the initial concerns about offering a multitenant platform using a customer-facing, overlaid management solution, such as VMware vCloud Director®, is understanding the capabilities and constraints for the customer solutions that can be delivered and for the service provider infrastructure which will support these solutions. With the inclusion of VMware NSX® in later releases of vCloud Director, the ability to create complex customer topologies has increased, but so have the concerns which can justifiably be raised over the deployment of both products technically and operationally.\nDocument Purpose and Scope #  This document examines the way familiar customer topologies can be replicated within a VMware Cloud Provider’s offering using the capabilities of NSX, controlled through vCloud Director. While this document focuses on the architecture of a service provider’s multitenant environment, it starts with the evolution of a managed service customer’s topology into that of a cloud service customer. Having established a simple, illustrative customer topology, this document then explores the way this topology is implemented on the underlying infrastructure, and then offers example topologies for separating multiple customers within both the virtualized world and that of the larger data center and its external connectivity.\nWhile vCloud Director requires its own supporting network environment and configuration to provision compute workloads, those areas are outside the scope of this document. Because of this, a degree of familiarity is assumed with both vCloud Director and NSX. For more information on architecting and operating a vCloud Director solution, see Section7, References. Similarly, while the infrastructure topology of access networks used by service providers to manage tenant workloads, applications and services follow similar models to those explored for customer networking, the specific challenges of providing management access to tenant networks is out of scope for this document.\n This document is designed to assist service provider infrastructure architects tasked with the design of tenant networking within the data center environment. Its goal is to also assist service provider customer solution architects with the pre- or post-sale design of customer environments within a vCloud Director powered cloud service.\n Definitions Acronyms and Abbreviations #  Customer The service provider’s customer; the organization who pays for the service, and\nthe users who use the service.\nTenant The portion of the infrastructure that is used by, and provides services to, the\ncustomer.\nExternal network A network that connects the vCloud Director tenant to the data center network\ninfrastructure.\nAcronyms and Abbreviations #  AS Autonomous System is a collection of routing nodes within the same administrative boundary\n(see BGP).\nBGP Border Gateway Protocol is a dynamic routing protocol used within the public Internet and\nprivate wide area networks. It can be used with a single autonomous system as an internal protocol (iBGP) and externally between autonomous systems (eBGP).\nCE Customer Edge (router) is a term used to describe the role of a service provider router that\nsits on the perimeter of the provider network and connects to the local network on a customer’s premises.\nCSP Cloud Service Provider is the term used for a service provider capability that offers some or\nall of the key attributes necessary to be recognized as providing a cloud service. See The\nNIST Definition of Cloud Computing link in Section7, References for more information. DHCP Dynamic Host Configuration Protocol (rfc2131 and updates) is a protocol that enables a host\nto initialize on an IP address based network without a configured IP address. The protocol\nsets out a process for the host to assume a temporary address and request an IP address\nfrom a local or remote authority on the network to which it is connected.\nECMP Equal Cost Multi-Path is a routing term in which multiple next-hop choices all carry the same\npreference or “cost”, allowing traffic to be distributed across several links or devices to increase network resilience and performance.\nESG VMware NSX Edge™ services gateway, sometimes simply “Edge”, or within vCloud Director\n“Edge Gateway” is a network and security virtual appliance that provides a number of services. See Section2.2.2,Basic Cloud Service Provider Customer Topology for more information.\nMPLS Multi-Protocol Label Switching is a network packet forwarding technology often used by\nservice providers in their high-speed core networks. It uses hop-by-hop labels instead of destination addressing to enable traffic engineering, or management, of network paths and traffic flows.\nMSP Managed Services Provider is the term used for a service provider capability that does not\ntypically provide a customer facing, self-service portal which customer use to directly control their environments.\nNAT Network Address Translation is a technique in which the source and/or destination addresses\nwithin an IP packet’s header are changed to hide the real address of a service. This is used for instance when devices on a private network connect to the public internet.\nNIC Network Interface Card (NIC) is the network adaptor which connects the ESX hosts to the\nexternal network infrastructure.\nOS Operating system is the layer of software deployed onto the hardware layer of a physical or\nvirtual computer. In VMware ESXi™ based solutions, the physical hardware uses VMware ESXi as its operating system and the virtual machines which ESXi supports run a variant of Microsoft Windows of a Linux distribution as the “guest OS”.\nPE Provider Edge (router) is the term used to describe the role of a service provider router that\nconnects multiple Customer Edge (CE) routers to the Provider’s core (or “P”) routers. In some provider platforms, the role of the CE router is virtualized, so the PE router is physically connected directly to the infrastructure supporting the customer solutions rather than through a physical per-tenant CE router.\nSDN Software-defined networking is a technology that creates end-user network elements,\ndefined in software which are then deployed on top of a physical “underlay” network. VCDNI vCloud Director Network Isolation is a proprietary “MAC in MAC” encapsulation used in\nearlier versions of vCloud Director which allowed multiple, isolated customer networks to be\n“tunneled” between hosts over a single network.\nVDC Virtual data center is a collection of resources that are managed by vCloud Director. See\nTable 1 for more information.\nVIP Virtual IP is a term for an additional IP address that provides access to one or more devices\nwithout being assigned permanently to any of them. It is found in solutions where two or more devices provide high availability by presenting a single IP address for clients to connect to, without needing to know which device will service their request.\nVLAN Virtual LAN is a network protocol which allows multiple, separate Layer 2 networks to be\ncarried on the same physical (Layer 1) medium.\nVPN Virtual private network is a technique for separating traffic within a shared infrastructure. It is\noften used when an encrypted overlay is added to an insecure shared network such as the Internet, or when customer separation is provided over a service provider WAN.\nVRF Virtual routing and forwarding is a technique in which a single network device can manage\nmultiple independent routing tables at once and apply the resulting forwarding rules to traffic associated with a specific instance.\nVXLAN Virtual eXtensible LAN is an encapsulation protocol that allows multiple, separate Layer 2\nnetworks to be carried over a common Layer 3 network.\nWAN A wide area network is a telecommunications network that typically spans a large geographical area.\nCustomer Networking In a Service Provider Environment #  As a Managed Service Provider, building complex customer topologies with VMware vSphere® environments is constrained only by the capabilities and topologies that can be built using the network configuration within vSphere together with that of the underlying data center network infrastructure. However, when customers want to change their network configuration, traditional services fall short in two distinct areas. First, while not all customers are capable of designing their own network configurations, those that are have previously had little, if any, access to be able to make changes within the service provider managed environments. Instead, the customer must raise an order, or request the engagement of a service provider solution architect to capture their requirements and provide them to the service provider’s operational teams. The second shortfall in customer experience is that presented with the customer requirements, the operational teams must work out the necessary changes to implement the customer requirements, document the changes, raise appropriate change request or notifications, await approvals and scheduled outage windows before work can commence. After the work starts, coordinating changes across disparate teams and technologies is challenging, testing is complex and time consuming, and recovery planning must account for failures across all areas affected by the change.\nHaving simplified the delivery of complex customer compute solutions by virtualizing the server environments with vSphere, the service provider can use a similar approach to simplifying the networking layer of a customer solution by introducing NSX to provide software-defined networking (SDN). By making use of a common “underlay” network within the physical data center, NSX allows the service provider to configure complex, multi-customer network topologies and services without the need to reconfigure the underlay network each time. Further, because these services are defined in software, the second of the two shortfalls described earlier can be addressed in several ways. The first, and most straight forward, leverages the fact that a software-defined network can be managed from a single point. While it is possible to automate the configuration of multiple interconnected legacy network devices, this automation is often complex and error prone due in part to the fact that many of these devices were not originally designed with remote configuration management in mind. With NSX, a service provider network engineer can, from a single location, configure, build, deploy, modify, and decommission network connectivity and services for any tenant in the data center. While this central control is a huge help, efficiency and consistency gains are often made through the automation of repeatable tasks. NSX offers a feature-rich API that allows configuration of those same networks and services from external tools. The APIs can be used to create and manage changes, or to “read” the state of a customer environment for monitoring or compliance purposes.\nvCloud Director allows the service provider to address the first of the shortfalls mentioned earlier, and the one which is arguably, most apparent to the customer. It provides a portal to allow customers to carry out their own provisioning and changes, store frequently used configurations as templates, and access templates that have been created and shared by the VMware Cloud Provider. vCloud Director is able to control the underlying vSphere environments it manages through the APIs exposed by VMware vCenter Server® and other vSphere components. The introduction of similar API access to the software-defined network layer as noted earlier means that in the latest releases (v8.20 at the time of writing), customers can now manage their environment’s NSX provided networks and services through the same vCloud Director portal and vCloud Director API.\nCustomer Network Topologies #  With complete access to the interfaces of all of the elements used to build a customer solution, service providers can use the entire range of capabilities exposed through those interfaces so that each customer receives a bespoke environment, perfectly suited to meet their requirements. However, this presents challenges across the service provider organization. Each bespoke design must be carefully “documented” so that operations and support teams can understand a solution when they are asked to work on it or for infrastructure teams when work is required on the data center’s power or cooling systems. In the commercial side of the business, tariffs and billing systems must be able to cope with each customer’s individual configuration, and the complexities of carrying out changes reflected in any associated charges.\nStandardizing network topologies while still offering customers sufficient flexibility is key to increased speed and efficiency in the service delivery. The introduction of a Cloud Management Platform (CMP) by its nature abstracts the users, both service provider and customer, from the interfaces of the underlying infrastructure. In doing so it brings some constraints to the range of features it exposes from that underlying infrastructure. However, by adding cloud capabilities, a Managed Service Provider can begin to realize these speed and efficiency gains which the enforced “standardization” of the CMP brings.\nReplicating a Managed Service Customer Topology in vCloud Director #  When approaching the adoption of vCloud Director and NSX from the perspective of a customer or the service provider Solution Architect, it is important to understand how the familiar customer topologies of the Managed Service Provider world can be replicated in the portal-driven Cloud Service Provider world. This section explores the traditional customer topology model, examines the new building blocks which vCloud Director and NSX provide and the equivalent customer topologies that are then built within the Cloud Service Provider platform.\nTraditional Managed Service Customer Topology #  Customer topologies, particularly in managed services bespoke deployments, can take many forms, but most share common traits. They typically have some or all of the following:\n External access from untrusted networks such as the internet. External access from trusted or semi-trusted, corporate wide area Networks. Perimeter security on some or all ingress paths. Separate networks within the solution for administrative separation of solution components. Internal security for controlled separation of solutions components. Routing/switching to allow the solution components to communicate with each other.  The following figure is an example “three tier” network that illustrates typical elements.\nFigure 1. Example Managed Service Customer Topology\nInternet WANInternet WAN Firewall Firewall\n(optional)\nTenant Core RouterInternal FirewallWeb Network\nInternal App Network NetworksAnd\nWorkloads Database Network\nIn the figure, the WAN connection is separated from the core router with a firewall. Depending upon the level of trust which the WAN and the workload warrant, as well as the customer’s appetite for risk, this might not be required. When there is no firewall, a single network (usually a VLAN) connects the tenant core router directly to the WAN presentation, typically in the form of a dedicated, physical, per-tenant Customer Edge (CE) router. This simplified model will be used as the basis for illustrations throughout this document although it is acknowledged that this is far from the only topology that could be deployed.\nThe NSX Edge Services Gateway #  vCloud Director allows the provisioning of compute workloads (and their associated storage) on the underlying vSphere environments which it controls as well the provisioning of networks to support them. With the ability to consume and manage NSX in recent versions of vCloud Director, networks are now provisioned using NSX managed VXLAN rather than vCloud Director Network Isolation (VCDNI) which was used in earlier versions. In addition to these NSX networks, vCloud Director now provides the ability to provision and manage an NSX network and security appliance called the Edge Services Gateway (ESG) rather than the VMware vCloud® Network and Security™ edge used in earlier versions.\nUnlike virtual networks which are implemented within the VMware ESXi hypervisor, the Edge Services Gateway is a network appliance virtual machine (or virtual appliance) with interfaces that connect to the networks within the solution. In this position, the Edge Services Gateway can provide a number of network services, the main ones of which are the following:\n Routing – Using static routes and/or dynamic routing protocols. Firewalling – To provide filtering of “North/South” traffic entering or leaving the solution. Network Address Translation – Of either source, destination or both addresses. Load balancing – At either Layer 7 for greater feature capabilities or Layer 4 for greater throughput. VPN termination – Either Layer 3 site-to-site or client VPNs or Layer 2 VPN[See Streamlining Customer On-Boarding with NSX L2 VPN Services in the References section for more information. ] to allow bridging of hybrid solutions where part of the solution sits outside of the vCloud Director environment or data center. Physical-to-virtual interconnection – Allows routing between external, physical networks (in the form of VLANs) and internal NSX virtual networks (in the form of VXLANs). DHCP/DNS – The Edge Services Gateway also supports DHCP (as a server or relay/helper) and a DNS forwarder.  Providing both routing and firewalling capabilities, the Edge Services Gateway can perform the roles of both tenant core router and internal firewall as shown inFigure 1. The equivalent customer topology built using the Edge Service Gateway is described in the following section.\nBasic Cloud Service Provider Customer Topology #  Moving a customer from a traditional MSP environment to the service provider’s cloud platform does not change the basic requirements on which the service was originally built. The attributes listed in Section 2.2.1, Traditional Managed Service Customer Topology still apply. Translating the topology to a vCloud Director managed service results in a very similar topology which is shown in the following figure.\nFigure 2. Basic Cloud Service Provider Customer Topology\nInternet WANInternet WAN Firewall Firewall\n(optional)\nEdge Services GatewayWeb Network App Network Tenant Networks And\nWorkloads Database Network\nWith the introduction of NSX, the roles of the physical tenant core router and internal firewall are replaced by the Edge Services Gateway. Because this device provides North/South firewall capabilities, it can also remove the need for a dedicated WAN firewall, saving the service provider cost and complexity so contributing to both CapEx and OpEx reductions. While the topology seems almost identical to that shown earlier, what is not visible in the figure is the customer’s ability to deploy compute and network services from the Edge Services Gateway southbound through the vCloud Director portal. This addresses the two shortfalls identified with MSP services, the customer’s ability to make changes to their own environments and the speed and reliability with which those changes can be implemented.\nThe NSX Distributed Firewall #  In addition to VXLAN-backed networks and the Edge Services Gateway, the introduction of NSX features in vCloud Director brings another key benefit. The presence of the NSX components in each ESXi host, allows vCloud Director customers to utilize the NSX Distributed Firewall (DFW). The NSX Distributed Firewall implements a stateful packet filtering capability on each vNIC of every virtual machine (VM) under its management. In addition to the control of traffic arriving at the VM from outside the network to which the VM is connected, the Distributed Firewall allows control of traffic between VMs on the same network. This granular control of traffic within the same network is known as micro-segmentation. Micro- segmentation allows a degree of control over traffic that has already been allowed through the perimeter firewall which has not, previously, been possible. The following illustrates a portion of the Distributed Firewall “policy” applied to traffic to and from two “web server” VMs.\nFigure 3. Micro-Segmentation with the Distributed Firewall\nThe DFW policies that control the flow of packets to and from each VM’s vNICs are configured centrally through the new vCloud Director HTML5-based firewall management interface and then distributed to the ESXi host to implement on the running VM. Should the VM be moved, the policy is reapplied on the destination host. This distributed policy management with per vNIC implementation when applied across the entire tenant network topology is shown in the following figure.\nFigure 4. Basic Customer Topology with NSX Distributed Firewall\nInternet WANInternet Firewall\nEdge Services GatewayWeb Network App Network Tenant NetworksAnd Workloads\nDatabase Network\nIn the illustration, each vNIC is effectively separated from the network by a “firewall”. This allows the traffic between VMs on the same network to be controlled by a firewall policy in a way that is not practical using traditional networking infrastructure. See Section7, References for more information on the benefits of micro-segmentation. Both the North/South policy on the Edge Services Gateway and the Distributed Firewall policy itself, can be managed from the vCloud Director user interface either by the service provider or, should the service provider choose to offer the facility, the customer themselves.\nBecause the Edge Services Gateway offers both firewall and VPN services, customers might question the presence of two firewalls in the internet connectivity, particularly as the benefits of micro-segmentation become accepted. At this point, the service provider can further reduce cost and complexity by removing the physical Internet firewall and moving its roles to the Edge Services Gateway. This level of risk acceptance is likely to be different for each customer, and it is possible that service providers might choose to offer solutions both with, and without, the physical internet firewall.\nFurther NSX Feature Support in vCloud Director #  Each release of vCloud Director brings new features and functionality. While the current version does not support the full NSX feature set, recent releases of vCloud Director have each added further support for the consumption and management of additional NSX features. This trend is set to continue, so the reader is encouraged to check the most recent vCloud Director release notes to establish the level of support at the time of reading.\nMultitenancy in a Cloud Service Provider #  While Managed Service Providers are used to providing multitenancy within a single data center location, this is often created using discrete hardware for each customer’s services, often with dedicated compute, storage, networking or security hardware with direct connectivity to dedicated, physical, WAN access CE routers. Similarly, the ESXi layer of each tenant is often managed from a dedicated VMware vCenter Server® instance. The following figure shows the basic tenant topology within a multitenant Managed Service Provider data center.\nFigure 5. Example Managed Service Multitenant Data Center Topology\nInternet WAN Per Tenant CE Routers\nDatacenter Internet L2 / L3 distribution\nWeb Network Web Network Web Network Web Network Web Network App Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Tenant 2 Tenant 3 Tenant 4 Tenant n\nService Provider Datacentre\nThe introduction of cloud services allows a consolidation of that virtualization management layer into perhaps a single vCenter Server, managing compute hosts serving multiple customers. If the Cloud Service Provider is to offer rapid onboarding of new tenants, it is far quicker and more economical to share network hardware, too. In the past, sharing security hardware was possible, but required the provision of large, high capacity security appliances that could offer logical separation for each tenant, often in the form of virtual contexts or instances. However, the large capital outlay to provision such devices with capacity to scale to the number of tenants required, was a challenge for Cloud Service Provider business cases. VMware Cloud Service Providers now have the benefit of being able to provision dedicated security devices in the form of NSX Edge services gateways whenever they need to with the only proviso being that they capacity manage the underlying compute platform on which the services run, and the underlay network platform that connects the compute hosts together.\nWhile the commercial benefits of sharing hardware are easy to see—increasing the utilization of hardware minimizes the amount of hardware that must be procured, deployed, and managed—it introduces the new challenge of providing logical tenant separation at all levels of the infrastructure stack. Creating separation at the vSphere layer might be straight forward, but extending that separation to the user interface or APIs is more complex. vCloud Director approaches this problem by abstracting the elements under its control away from the end user, instead providing them with a new graphical user interface for manual interactions and an API for machine interactions. It is important for the service provider architect to understand how the layers of a vCloud Director solution fit together and how actions at one layer are carried out in the other layers.\nWhile the VMware software-defined data center (SDDC) model includes storage virtualization, the key layers that illustrate the move from Managed Services Provider to Cloud Services Provider and which are considered within this document are shown in the following figure.\nFigure 6. Layered Software Transition from VMware Cloud Provider Program MSP to CSP\nCloud Management vCloud Director Platform\nNSX Network Virtualization Compute Virtualization ESXi Compute Virtualization Compute Hardware Compute Hardware\nVMware Cloud\nProvider Managed VMware Cloud\nServices Provider Provider\nvCloud Director Multitenancy #  In providing a multitenancy overlay, vCloud Director introduces some new terms for the constructs that describe that multitenancy model. The terms, which are used throughout the rest of this document are described briefly in the following table. For a more detailed explanation, see the documents linked in the Section7, References.\nTable 1. VMware vCloud Director Tenancy Terms\n| Term | Description |\nOrganization An organization is a logical group of all users to whom\nresources will be presented. Provider virtual data center A provider VDC is a collection of vSphere resources\n(storage, CPU and memory) that vCloud Director can manage and use. Organization virtual data center An Organization VDC is a subset of a Provider VDC’s\nresources that are available to an Organization. The following figures illustrate these concepts.\nFigure 7. Service Provider Data Center vSphere Clusters and Resource Pools\nHigh CPU speed hosts Standard hosts\nResource Pool 01-01 Resource Pool 01-01\nCluster-01 Cluster-01High memory hosts Standard hosts\nResource Pool 02-01 Resource Pool 02-01\nCluster-02 Cluster-02\nDatacenter-01 Datacenter-01\nvCenter-01 vCenter-02\nService Provider Data Centre\nInFigure 7, the data center has two vCenter Server nodes, each managing two clusters. Under vCenter- 01, the two clusters contain different types of hosts. Cluster-01 has hosts with higher CPU clock speeds for CPU intensive workloads, where Cluster-02 has hosts with extra memory allowing for hosts with higher memory demands. vCenter-02 on the other hand, contains two clusters with the same type of hosts, each with a balance of clock speed and memory designed for general workloads. Because it is not possible to place a resource pool anywhere other than across all hosts in a cluster, and vCloud Director places workloads within a resource pool, all hosts in a single resource pool, and therefore cluster, should be of the same type to ensure consistent performance.\nBecause a Provider VDC (PVDC) is connected to a single vCenter Server, the vCloud Director example in Figure 7 must have at least two vCenter Server nodes. However, to allow for the placement of workloads on either high CPU or high memory hosts, the resources under vCenter-01 should be split into two Provider VDCs, each mapped to a resource pool in one of the clusters. Because a Provider VDC can have multiple resource pools from the vCenter Server assigned to it, vCenter-02’s resources could be presented as two separate Provider VDCs or, as shown inFigure 8, one PVDC with multiple resource pools.\nFigure 8. Mapping Provider VDCs to vSphere Resources\nPVDC1 - Performance\nResource Pool 01-01 Resource Pool 01-01 Cluster-01 Cluster-01PVDC3 - Standard\nPVDC2 - Memory\nResource Pool 02-01 Resource Pool 02-01\nCluster-02 Cluster-02\nDatacenter-01 Datacenter-01\nvCenter-01 vCenter-02\nService Provider Data Center\nThe PVDC presents resources that can be consumed by the Organizations who subscribe to the Provider’s Cloud service. To present the resources to those Organizations, vCloud Director uses an Organization VDC (Org VDC or simply OVDC) to represent a subset of a Provider VDC. A customer, represented by a vCloud Director Organization can access multiple Organization VDCs. In the example illustrated inFigure 8, a customer might require some high memory workloads and some standard ones, in which case they have two OVDCs, one in PVDC2 and one in PVDC3. A customer who only requires standard workloads might have a single OVDC, or might choose to have two to enforce different oversubscription ratios or workload placements for production and development workloads.\nWhen accessing vCloud Director, an Organization’s users with appropriate access privileges see all of their OVDCs listed.\nBasic vCloud Director Tenant Topology #  The following figure shows the vCloud Director Tenancy model overlaid onto a simple customer topology. Figure 9. Basic vCloud Director Customer Topology\nInternet WANInternet Firewall vCD External\nNetworks\nOrg VDC Edge Gateway\nWeb Network\nApp Network Org VDC NetworksAnd vApps\nDatabase Network\nOrganization VDC\nThe Org VDC contains the customer’s workloads which in vCloud Director, whether they are a single VM on a network, or multiple VMs on different networks, are known as vApps. Because vCloud Director does not manage all of the customer’s resources, those in the physical data center outside must be managed by the service provider or, through a different customer-facing portal. Networks that connect Organization VDCs to external data center resources are described within vCloud Director as “external networks”. They terminate on an Org VDC Edge Services Gateway to provide routed, Network Address Translated (NAT’ed) or directly connected access to and from the workloads inside the Org VDC. Networks that are confined to the vCloud Director environment are known as Org VDC Networks.\nBoth an Organization’s Edge Services Gateways and Org VDC networks can be managed from the vCloud Director Org VDC management page as shown in the following figure.\nFigure 10. Managing Edge Gateways and Org VDC Networks in vCloud Director\nIn the current version of vCloud Director, the NSX Distributed Firewall uses the new HTML5 interface which is launched from the Organization VDC’s Actions menu, as shown in the following figure.\nFigure 11. Managing the NSX Distributed Firewall in vCloud Director\nMultitenant Networking #  In a VMware Managed Service Provider environment, networking is managed from a number of points. Physical network infrastructure is managed per device, from a vendor supplied central management platform, or from a bespoke automation capability. Virtual network infrastructure is managed from one or more vCenter Server nodes, each responsible for the connectivity between the physical network and the virtual workloads. In a VMware Cloud Service Provider environment, vCloud Director abstracts some of the virtual network management tasks and network management then falls into the layers described in the following section.\n3.3.1 Network Layers in a Multitenant Cloud Platform\n Data center and NSX underlay networking – The layer of network configuration which remains the responsibility of the service provider. As well as management networks, this includes the NSX “Transport” network, which carries the VXLAN-encapsulated traffic between ESXi hosts, and the per- tenant networks which must be configured within the data center infrastructure when a new customer is onboarded. vCloud Director networking – The Org VDC networks which are created and managed entirely from within vCloud Director and use the preconfigured NSX Transport network for connectivity between hosts. vCloud Director managed networking – The external networks which are initially created in the relevant Provider VDC vCenter Server, but which are then “added” to vCloud Director and can subsequently be managed from the vCloud Director user interface or API.  These three types of networks are show in the following figure. The diagram shows the per-tenant networks required to connect each customer’s WAN access to their vCloud Director Organization VDC.\nFigure 12. Example Cloud Service Provider Multitenant Data Center Topology\nInternet WAN Per Tenant CE Routers\nDatacenter Internet L2 / L3 distribution\nWeb Network Web Network Web Network Web Network Web Network App Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Org VDC Tenant 2 Org VDC Tenant 3 Org VDC Tenant 4 Org VDC Tenant n Org VDC\nProvider VDC Service Provider Datacenter\nIn this graphic, the networks from the internet distribution and WAN routers are managed within the data center network infrastructure, typically at customer onboarding. The “Web”, “App”, and “DB” networks in each tenant Org VDC are created and managed from vCloud Director either by the customer or the service provider. The networks from the internet firewalls (if provided) and WAN routers, once configured, appear in vCloud Director as external networks and are subsequently managed from the vCloud Director user interface. SeeAppendix* A*:* Provisioning* an* External Network in vCloud Director for more details.\nData center external connectivity in a Cloud Service Provider environment follows the same models in the physical infrastructure as it would in a Managed Services Provider environment.\n Per-tenant networks are used where Layer 2 separation is required across shared data center infrastructure. For example in cases where there is overlapping customer addressing, or a need to manage traffic flows without resorting to Layer 3 routing. Customer access from their WAN to their vCloud Director environments, or from co-located services within the physical provider data center, are examples of per-tenant networking. Shared networks can be used when there is no risk of overlapping addresses (such as public internet access) and where Layer 3 routing can be used to steer traffic to the correct destination.  Shared networking between multiple customers within a single Layer 2 broadcast domain raises the risk of a network problem affecting multiple customers. To mitigate this, VMware Cloud Providers can choose a hybrid approach in which common networks (again, such as internet access) are terminated on high- performance Layer 3 devices which forward traffic to multiple, smaller downstream networks that offer separate broadcast domains, thereby reducing the effect one customer can have on others.\nNetworking Layers Examined #  In a vCloud Director Cloud Service Provider, network configuration changes can be instigated and managed from within the vCloud Director user interface or API by either the customers themselves, or the VMware Cloud Provider on their customers’ behalf. While some changes, such as IP address pool management or gateway addresses, remain within the vCloud Director configuration database, most impact the layers below. For example, in the case of a new Org VDC network, the request is passed from vCloud Director to the VMware NSX Manager™ connected to the vCenter Server that hosts the resource pool for the provider VDC in the Organization VDC where the new network is to be created. The NSX Manager configures the network within its internal state model, and then the underlying vSphere layer through the NSX Manager’s link to its parent vCenter Server.\nThe following sections examine this layered model from the perspective of the previous single tenant topology as well as the multitenant view at both the vSphere and NSX configuration layers.\nTenant Networking #  The basic Cloud Service Provider tenant topology inFigure 2 (and shown in the following figure for convenience) was constructed from twelve separate network segments.\nFigure 13. Cloud Service Provider Tenant Networking\nThe following figure represents the same tenant topology as it appears within the NSX and vSphere layers.\nFigure 14. vSphere Cloud Service Provider Tenant Networking\nInternet WAN12a 3a2b 3b EdgOer gG VaDteCway\nInternet Port Group\n12\n(Backed by F/W\nAccess-VLAN) 6 9\nWAN Port Group (Backed by CE\nWeb Port Group App Port Group DB Port Group Access-VLAN)\nVLAN VXLAN VXLAN VXLAN VLAN\nvSphere dvSwitch\n4 57 810 11Org VDC Networks And vAppsWeb Network App Network DB Network\n Connection 1 is made in the physical data center network infrastructure, and does not reach the NSX or vSphere layers of the solution. Connection 2 is made up of two parts, a physical connection between the customer’s internet firewall’s “inside” interface, which is presented to a port in the VLAN-backed Internet Port Group in the vSphere dvSwitch, and the Edge Services Gateway’s Internet interface connection to a second port in the same port group. Connection 3 is also made up of two parts, a physical connection between the customer’s WAN router “LAN” interface, which is presented to a port in the VLAN-backed WAN Port Group in the vSphere dvSwitch, and the Edge Services Gateway’s WAN interface connection to a second port in the same port group. Connections 4 and 5 present the Web VMs to ports in the Web Port Group which, because the Web Network is a vCloud Director Org VDC Network, is created within NSX as a “virtual wire”, so appears in the dvSwitch as a VXLAN-backed port group. Connection 6 presents the Edge Services Gateway web interface to the Web Port Group. Connections 7 to 9 follow the same pattern as 4, 5, and 6 except for the App Network/Port Group. Connections 10 to 12 also follow the same pattern as 4, 5, and 6 but this time for the DB Port Group. The logical position of the NSX Distributed Firewall on each virtual machine interface is also shown to represent the point at which a DFW policy is applied to the traffic flow into or out of a vNIC on a virtual machine.  vCloud Director Multitenant Data Center Networking in vSphere #  The detailed analysis the previous section illustrates the representation of a single tenant within the vSphere layer. The following represents the same analysis but applied to a multitenant vCloud Director data center.\nFigure 15. vSphere Cloud Service Provider Multitenant Networking\nInternet WAN Per Tenant CE Routers\nTenant 4 dedicated firewall / Internet VLAN PortGroup\nShared Internet PortGroup Per-Tenant / Per-VXLAN PortGroups Per-Tenant / Per- WAN CE VLAN PortGroups\nVLAN T4 - VLAN T1 - VXLANs T2 - VXLANs T3 - VXLANs T4 - VXLANs Tn - VXLANs T1 - VLAN T2 - VLAN T3 - VLAN T4 - VLAN Tn - VLAN\nvSphere dvSwitch\nWeb Network Web Network Web Network Web Network Web Network App Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Org VDC Tenant 2 Org VDC Tenant 3 Org VDC Tenant 4 Org VDC Tenant n Org VDC\nvCloud Director Provider VDC Service Provider Data Center\n The Internet access shown in this graphic is shared across all tenants who do not require a physical firewall. The shared internet access connection is presented as a port in a VLAN-backed port group in the vSphere dvSwitch. Each vCloud Director tenant has an external network connection between a port in this group and the internet interface of the Edge Services Gateway in their Org VDC. Tenant 4 has elected to retain a physical internet firewall. In their case, within the physical data center infrastructure, the shared internet access is presented to the “outside” of their firewall, and a separate VLAN connects the “inside” of the firewall to a separate VLAN-backed port group within the vSphere dvSwitch. An external network connects a second port in this port group to the internet interface of the Edge Services Gateway in their Org VDC. Each customer has a separate WAN CE router. Because the connection to their tenant environments could, therefore have overlapping addresses (from within their vCloud Director organization, or from their WAN), each must be separated through the data center and into the vCloud Director managed environment. This typically means that each tenant’s WAN connection is presented as a separate external network with a separate VLAN ID, and therefore requires a separate VLAN-backed port group in the vSphere dvSwitch to connect to the WAN interface of their respective Edge Services Gateways. While simplified for clarity in this graphic, in the same way as the Edge Services Gateway interfaces and virtual machine interfaces inFigure 14, each tenant’s Org VDC networks appears as a VXLAN- backed port group within the dvSwitch, with ports for the Edge Services Gateway interface and any vApp virtual machines connected to that network.  While this example illustrates the separation of VLANs behind the per-tenant WAN access, in a service provider data center it is likely that at some point in the infrastructure, several VLANs of a similar type and security level will be “trunked” on a single link. When that is the case, the per-VLAN presentation between the vSphere networking layer (beneath the Provider VDC) and the data center infrastructure shown in Figure 15 is not necessary. In a similar way to a physical switch, a dvSwitch Uplink port can carry multiple VLANs encapsulated on the single connected link using IEEE 802.1q. To do this, when a dvSwitch Uplink Port Group is being created, its VLAN Type is set to “VLAN trunking” as shown in the following figure. The range of VLANs allowed on the trunk can also be configured here.\nFigure 16. Configuring a dvSwitch Uplink Port Group VLAN Trunk\nAn example of where this can be applied is shown in the following figure. In this example, the service provider is presenting WAN access by connecting the MPLS Provider Edge (PE) router to the vCloud Director platform. Each customer’s WAN VPN VRF is presented, by the PE router, to a sub-interface on a trunk connection, the other end of which connects to the customer’s vCloud Director tenant, terminating on its Edge Services Gateway. Similarly, multiple customer WAN CE router connections can be terminated on VLAN-tagged access ports of an “aggregation” switch, whose uplink then delivers the trunked connections to each tenant’s Edge Services Gateway.\nFigure 17. Trunking Multiple External Networks to a vCloud Director Environment\nWAN Provider Edge (PE) Router with Per Tenant VLAN Trunk\nPer-Tenant / Per- WAN CE VLAN PortGroups\nUplink T1 - VLAN T2 - VLAN T3 - VLAN T4 - VLAN Tn - VLAN Trunk\nvSphere dvSwitch\nWeb Network Web Network Web Network Web Network Web Network App Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Org VDC Tenant 2 Org VDC Tenant 3 Org VDC Tenant 4 Org VDC Tenant n Org VDC\nvCloud Director Provider VDC Service Provider Data Center\nThis technique can equally be applied to multiple, separate internet VLANs where each is presented to a separate customer firewall in the data center, or, where multiple customers’ co-located services are “trunked” into the vCloud Director environment over shared, high-bandwidth connections.\nThe number of dvSwitches used to deliver these VLAN-backed port groups depends upon a number of design considerations, one of which is the number of physical network adapters in the ESXi host. For hosts with only a single pair of adapters, all VLANs must be trunked over the same uplink port group (as shown in the range inFigure 16). In the case of a host with multiple adapters, or with adapters that can simulate multiple adapters to vSphere (such as some blade servers), dvSwitches can be created to separate, for example, management, internet and WAN traffic. For ease of configuration when this is possible, a range of VLAN IDs can be pre-allocated for “WAN uplinks” and, as each tenant is onboarded, they are allocated the next ID in the range. The Uplink Port Group is created with the specific range configured, and, the port group for each new tenant’s “External Network” configured with their specific VLAN ID from the range.\nNetworking in a Multi-Cluster “Leaf-Spine” Infrastructure Topology #  The illustrations in this section assume it is possible to connect (trunk) the same VLAN between the data center’s external connectivity environments and the workload compute environments. In some infrastructure topologies, this is not possible because multiple routing hops might ordinarily exist between different parts of the infrastructure. Solutions employing discrete rack-mount compute nodes (as opposed to blade-based solutions with integrated networking) are often configured in a “leaf-spine” topology where VLANs are constrained within a rack, and inter-rack connectivity is achieved over a routed Layer 3 core.\nWhen there is no ubiquitous Layer 2 coverage across the entire compute estate, the placement of tenant Edge Services Gateways onto compute resources with access to the required external connectivity becomes a challenge. vCloud Director offers some assistance because its placement engine deploys edge VMs to clusters based upon VLAN connectivity. Presenting the VLANs directly to a subset of racks (typically at least two for resiliency) provides that Edge Services Gateways will only be deployed to those clusters because of the VLAN availability there. However, vCloud Director will also be able to provision ordinary workloads to those same clusters because of the availability of tenant networking required for the southbound connectivity from those same Edge Services Gateways. Because of this, clusters with external connectivity in this model are known as combined Edge/Compute clusters.\nThere are a number of alternative models for the placement of Edge Services Gateways on separate “Edge Clusters” without tenant workloads, each of which brings its own complexity and operational overhead. The principles outlined earlier in this section still apply, but must be applied on top of the Provider’s chosen Edge cluster option. The options are discussed in more detail in Architecting a VMware vCloud Director Solution for VMware Cloud Providers (Section 6.3.2). See the Section7, References for more information.\nvCloud Director Multitenant Networking in NSX #  For vCloud Director to take advantage of NSX, the vSphere environment which vCloud Director is to manage must be prepared for NSX first. The design considerations for an NSX underlay (VTEP Transport) network are the same whether the consumer is to be vCloud Director or, another CMP or orchestration tool, the specifics of which are beyond this document. However, during the design of a standalone NSX deployment, a number of choices are presented to the architect. When vCloud Director is managing the NSX environment, some of those decisions are made by vCloud Director, both at installation and during subsequent management of the environment.\nThe relationship between the network elements in vCloud Director and those of the underlying NSX and vSphere platforms, is examined in the following table.\nTable 2. vCloud Director Tenancy and Network Elements in NSX and vSphere\nvCloud Director NSX or vSphere Notes \nProvider VDC NSX Transport Zone The configuration of a PVDC causes the\ncreation of a Transport Zone within NSX. The new Transport Zone’s Control Plane Mode is initially set to multicast and should be changed from the NSX user interface or API immediately if this is not the preferred setting. External Network vSphere Port Group An external network is created in the data\ncenter infrastructure, vCenter Server networking, and vCloud Director Cloud resources dialogues. SeeAppendix A: Provisioning an External Network in vCloud Director for more details. Edge Services NSX Edge An Edge Services Gateway created with the Gateway Org VDC configuration results in the creation\nof an NSX Edge. The initial name given to the Edge Services Gateway in vCloud Director is encoded into the NSX Edge name together with a UUID field to ensure unique names across tenants. Org VDC Networks NSX Logical Switch / The creation of an Org VDC Network in vCloud Director results in the creation of an NSX\nvSphere Port Group logical switch with the initial Org VDC network name and a UUID in its name. This then\nresults in a dvPortGroup being created in vSphere with the logical switch name and VXLAN network (segment) ID encoded into its name. IP Address Management and Routing #  Tenant Address Management #  There are a number of external connectivity options to enable customers to reach the workloads on the networks within their tenant environment. Each requires that the IP addresses used externally to access the tenant workloads be known by the customers’ connectivity method, WAN, VPN or other. The addresses that are used to access the solution can be provided by either the service provider or the customer. The details of the addresses used to access the tenant networks can be statically configured on routing devices used for access, but is often distributed using dynamic routing protocols. The configuration of static routing is largely dependent upon the specific routing hardware in question and is therefore beyond the scope of this document. The distribution of routing information using dynamic protocols is, in contrast, a key element of the efficiency gains which the Cloud Service Provider seeks to deliver.\nThe different methods of sourcing and managing addresses for tenant networks and their advertisement to customer access networks is discussed in the following section.\nService Provider Managed Addressing #  Some service providers choose to manage the address space within their tenant environments and allocate appropriately sized ranges of addresses to their tenants. The advantage for the service provider is that they do not have to deal will multiple customers using the same “overlapping” addresses, which greatly simplifies access from the provider’s management platforms into multiple tenant environments. However, a downside of this approach is that it is quite likely that the addresses allocated to a customer could be in use elsewhere within the customer’s wider network. To prevent this duplication of addresses creating a problem, service providers enforce a layer of NAT at the boundary of the service. In cases such as this, the customer’s Org VDC networks are addressed from the service provider’s coordinated address space, typically using “private” addresses sourced from the ranges defined in RFC1918 (see Section7, References). So that the customer can reach these addresses, ranges of mutually agreed upon, often public Internet, addresses are assigned and translated to the internal addresses used within the tenant networks.\nThe address translation (NAT) can be configured and carried out on an external, provider-managed device within the data center typically dedicated to each tenant, or, it can be carried out on the Edge Services Gateway and managed through vCloud Director. When NAT is carried out on inbound connections and the destination IP address is changed from the one on the boundary network to the real IP address of the target, NAT is more specifically known as Destination NAT or “DNAT”. When NAT is carried out on the Edge Services Gateway, the external network that connects the tenant Edge Services Gateway to the Customer Edge router is allocated the subnet that contains the range of NAT addresses. The following figure illustrates this on the basic tenant topology used earlier.\nFigure 18. NAT on the Org VDC Edge Services Gateway\nThe interfaces of Edge Services Gateway and upstream devices are allocated addresses from the subnet assigned to the external network, and the remainder are made available to be used for NAT to/from addresses assigned to VMs within the customer’s Org VDCs. This process is examined further in Section 5.4, External Network Address Sub-Allocation.\nWhile this model simplifies the service provider’s network configuration, it can create problems for the customer, because some applications are intolerant of NAT and either will not work, or will require additional steps to overcome the issues caused by NAT. Because the ranges allocated to the Org VDC networks are hidden behind the NAT addresses, the real addresses of VMs and VIPs do not need to be exchanged with the upstream WAN devices. Because the addresses that are used for NAT are from the ranges that are allocated to the networks that directly connect the WAN devices to the Edge Services Gateway, the WAN devices will learn the NAT ranges as “Connected” networks and can then distribute those addresses to their upstream connections as needed.\nBring Your Own IPs #  While forgoing the simplicity which service provider managed addresses afford the provider, allowing the customer to bring their own addressing can greatly simplify the customer’s network configuration. The addresses assigned to workload VMs or load balancing virtual IPs (VIPs) are used directly by remote clients on the customer’s WAN to connect to services within the Org VDC, removing the need for NAT. Some customers consider a third-party data center to be a less trusted environment and might insist on a layer of NAT between the workloads within the data center and their WAN environment. When this is the case, even if the customer provides both the Org VDC network addresses and the NAT range, their configuration is effectively identical to that described in Section5.1.1, Service Provider Managed  Addressing with the exception that they might overlap with addresses used by another tenant or the provider’s management environment.\nWorkflows which, either at tenant onboarding, or as a “Day 2” action, create new Org VDC networks must assign new address subnets to those networks. To do so, the customer requires an IP addressing schema from which to allocate addresses for use within vCloud Director managed networks. vCloud Director provides an error message if a network is requested with an overlapping address range as shown in the following figure, but the customer or provider creating the network must have access to an appropriate subnet allocation to overcome the error message.\nFigure 19. Error Message Caused by Provisioning an Overlapping Address Range\nA number of techniques exist for allocating addresses from a larger schema. In some cases, each network subnet must be requested from the schema owner at the point of provisioning. In others, a larger “supernet” range of addresses are allocated by the customer schema owner for use within the provider environment. This allows delegation of management to either the service provider if they are providing a management service, or to the customer solution owner responsible for the workloads in the vCloud Director Org VDCs.\nCustomer Address Assignment #  The assignment of addresses for consumption by workloads in the Org VDC networks “customer” (provided by either the customer or the provider) takes place in one of three main ways. Two of these involve vCloud Director configuring the address onto the VM during its creation, while the third allows the VM’s guest operating system (OS) to be built without an IP address and to request one at boot time. Each method is described in the following sections.\nStatic IP Pool Assignment #  With Static IP pool assignment, vCloud Director chooses an address from the IP pool assigned to the Org VDC network. On supported guest OS, with VMware Tools™ installed and with “Guest Customization” enabled, the chosen address is then statically configured on the new VM during provisioning. This is the default option within vCloud Director and will result in an error if a VM provision is attempted without an IP pool with at least one spare address assigned to the network.\nFigure 20. Static IP Pool Address Assignment\nThis figure shows a new VM “VM6” being provisioned onto a network called “172.18.2.0_24”. Because the default “Static – IP Pool” method of address selection and assignment is in force, an address will be chosen from a pool assigned to the network (see the following figure).\nFigure 21. Org VDC Network Static IP Pool Configuration\nUnless the enhanced networking workflow is enabled on the Configure Networking page of the vApp provisioning dialogue (see the following figure), Static IP pool is the only option available on the Network Specification tab of the VM configuration shown inFigure 21.\nFigure 22. Enabling the Enhanced Networking Workflow\nStatic – Manual Assignment #  In many data center environments, the preferred option for servers is to permanently assign them a fixed IP address. Knowing that a server will retain its address after a reboot makes administration more straightforward. However, in some solutions, the specific address assigned to a VM carries additional significance. When this is the case, enabling the enhanced networking workflow and choosing Static – Manual (see the following figure) allows the user to manually select a specific address to be assigned to the VM being provisioned.\nFigure 23. Static – Manual Address Assignment\nThere are a number of points to be aware of concerning manual assignment of addresses, including the following:\n The manually entered address is validated against the network subnet and an error is raised if the address is outside of the network assigned to the network. A manually entered address is not validated against other address assignments already present on the network, but it is tracked. The IP Allocations dialog will show which VMs have been configured with the same addresses as long as they have been configured through vCloud Director, either through the UI, or API. It should also be noted however, that vCloud Director will not power on a VM with a duplicate IP address as long as it is tracking (or aware of) both allocations of the address. If the address assigned comes from within a range already assigned to an IP pool on the network, the allocation is recorded, and the utilization of network address space is updated to reflect the newly assigned address. If the address is allocated from within the subnet configured on a network but not from an IP pool on that network, the allocation is recorded but no utilization percentage is calculated for that network. After there are tracked addresses in use on a network, it is not possible to assign an IP pool that contains those addresses. It is, however, possible to create multiple pools “around” and “between” them, but utilization percentages are only calculated for the IP pools, not the entire subnet.  Manual assignment of IP addresses to VMs within vCloud Director allows complete flexibility, but makes the assumption that a user (or API call) that chooses manual assignment has a good reason to do so and understands the consequences. With guest customization enabled, the VM will be configured with the entered IP address which, if incorrect, could cause service issues. Manual assignment of IP addresses is useful when for example, the VM must have its IP address set without the aid of guest customization, but the administrator wants to track the address used within vCloud Director. A static manual assignment provides that the vCloud Director database is updated even if the VM address must then be set directly through the guest OS.\nDHCP Assignment #  While vCloud Director can manage and track the assignment of addresses to VMs, and can track manual allocations which it requested, it is also possible to manage IP addressing outside of vCloud Director. Selecting DHCP assignment during the VM creation (see the following figure) causes vCloud Director to configure the supported guest OS to use DHCP to acquire an IP address during its boot sequence rather than during its initial configuration.\nFigure 24. DHCP Address Assignment\nWhen a VM is configured to use DHCP to acquire an IP address, it requires either a DHCP server on the network to which it is connected, or, a DHCP “helper” or “proxy” on that network that can forward the VM’s request for an address assignment to an authority on a remote network. vCloud Director cannot track address utilization when DHCP is used, but it is possible to assign part of an Org VDC network’s address space to an IP pool (which would be tracked) and part to a DHCP scope (which would not be tracked). This can be useful in situations where for example, a portion of an application stack is relatively static and the rest is dynamically scaled as needed. The static portion would utilize an IP pool and because the specific addresses assigned to temporary workloads are not significant, they would use DHCP.\nInternet Address Management #  Internal, “private” addresses managed by the service provider or the customer which, if managed sensibly, have sufficient capacity so that all networks can be assigned subnets which allow room for expansion. This is not the case for registered “public” internet addresses which are in short supply. Internet access is presented to an Org VDC as an external network. Depending upon the provider data center topology, there might be one or more network hops between the vCloud Director environment and the local internet access or aggregation device. Because the precise topology is outside the scope of this document, only the final routing device is considered here.\nThe following figure shows the internet access elements of the data center. The red network shows the shared internet access network connected to a next-hop upstream device. As before, Tenant 4 has an external physical firewall, so while the other Tenants’ Edge Services Gateways have a connection to the internet external network, Tenant 4’s Edge Services Gateway is connected to a separate vCloud Director external network with the “Inside” interface of the physical firewall as the next hop.\nFigure 25. Internet vCloud Director External Network\nInternetShared - Internet external network\n.254 (.253/.252)\n.204 Tenant 4 - F/W Inner external network\n.30\nShared Internet x.x.x.0/24 Tenant 4 F/W Inner x.x.x.0/27\nvSphere dvSwitch .201 .202.203 .29 .249Web Network Web Network Web Network Web Network Web Network App Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Org VDC Tenant 2 Org VDC Tenant 3 Org VDC Tenant 4 Org VDC Tenant n Org VDC\nvCloud Director Provider VDC Service Provider Data Center\nShared Multitenant External Network #  In the previous example, the Internet external network is assigned an entire class C, /24 subnet of which only the last octet is shown. The next-hop gateway uses the highest address in the range (.254) and, because a physical device can run an availability protocol across redundant hardware, additional addresses (.253 and .252 in the example). Tenant Edge Services Gateways are directly connected to the network and have their interface addresses allocated from .201 upwards. This allows approximately 50 tenants to be allocated an Edge Services Gateway address from the remainder of higher end addresses on the subnet. With 50 tenants and the next-hop gateway allocated from the addresses in the /24 subnet, the “red” network still has all the addresses from .1 to .200 available for customers to use for services they want to be accessible from the Internet. These addresses can be assigned to customers in ranges of any given size using a method known as sub-allocation. See Section5.4, External Network Address Sub- Allocation for further information on the sub-allocation process. Each tenant must also have the interface address of their Edge Services Gateway sub-allocated to itself, so that it too can be used for tenant services. See Section5.3.3, Outbound Internet Access for the use of the interface address for outbound Internet access.\nDedicated Single-Tenant External Network #  Tenant 4 is consuming the .204 address on the Internet network, but is doing so on a physical device outside of vCloud Director. In this example, a single address has been assumed but a high availability firewall “pair” can in practice require two or three addresses. Tenant 4’s Edge Services Gateway requires a connection to an external network, but cannot use the “red” Internet network, so a second network and associated address subnet is required for that. Each network loses the highest and lowest addresses (network and broadcast addresses) as well as those required for the two connected device interfaces.\nOn a /24 network, 2 addresses out of 256 is a relatively small proportion, but if many tenants require “yellow” networks and each is much smaller in address subnet size, the overhead of losing four addresses from each can become a consideration. Despite that, the yellow network will still require an address subnet assigned to it. Certain network devices and protocols such as those used in VPNs can either be intolerant of, or complicated by, the presence of NAT, so the yellow network should, like the red network, be assigned a subnet of public internet addresses, one which is large enough for the customer’s requirements but not so large as to be wasteful. This is a particular challenge for service providers with limited public IPv4 addresses. Connecting tenants to a shared network employing address sub-allocation is a more efficient way to provide addresses to connected tenant Edge Services Gateways.\nIn the case of both Tenant 4 and the directly connected tenants, the addresses on their external Internet networks, after those allocated to the Org VDC Edge Services Gateway, can then be allocated to source or destination NATs or load balancer virtual server VIPs.\nOutbound Internet Access #  For tenant workloads to access the public internet, their private, internal addresses must be translated into public addresses that can be used on the Internet. Unlike the Destination NAT in Section5.1.1, Service Provider Managed Addressing, when the outbound connection to the internet needs its source IP address changing, this NAT process is more accurately know as Source NAT (SNAT). A Source NAT is a 1:1 mapping between the IP address used by the device connecting to the internet and a suitable internet address assigned to that device. This 1:1 mapping is typically necessary when the device in question requires unsolicited inbound connections to be able to reach it, such as a web server, or email transfer host.\nHowever, often one or more devices in a solution might require access to the internet but do not require unsolicited inbound access from the internet. These can be application servers which connect to a source of data or updates on the Internet, but should not receive inbound connections. For cases such as this, it is possible to “hide” many devices behind a single internet IP address. Each device’s outbound connection has its source IP address changed, often to the interface address of the device carrying out the translation, and the connection’s source TCP or UDP “port” number changed to a randomly selected number whose value is tracked in a connection table to allow the device to deliver the inbound half of the connection back to the correct, originating host. As both the source IP address and next layer protocol port address are both changed, this version of NAT is sometimes known as Port NAT (PNAT), or more commonly, Port Address Translation (PAT).\nThe following figure revisits the NAT diagram fromFigure 18, but this time looking at outbound connections.\nFigure 26. Outbound Address Translation (SNA/PAT)\nAs noted in Section5.3.1, Shared Multitenant External Network, the Edge Services Gateway must have its interface address sub-allocated to itself before the address can be used for outbound PAT.\nExternal Network Address Sub-Allocation #  In a Managed Service Provider environment, the IP address space on a shared network such as the “Internet” network inFigure 25, is under the control of the service provider. If the tenant connections to that network were for example per-tenant physical firewalls under the management of the provider, the consumption of addresses on the Internet network would also, therefore, remain under the control of the provider. Allocating an internet address to a particular tenant would be accomplished by configuring NAT on the appropriate firewall, which would then respond to IP packets on the internet network destined for the address in the NAT statement.\nIf, as may be the case in a Cloud Service Provider environment, the customer could configure their own firewall NATs or load balancing VIPs, they could, without some form of control, consume as many of the internet addresses as they wanted, and conceivably, configure an address which is already in use within another tenant on the network, causing service disruption. To manage this scenario, vCloud Director introduces the concept of address sub-allocation. Before an Edge Services Gateway can consume addresses on an external network (other than its assigned interface address), a range of addresses must be sub-allocated to it. This is a two-stage process. First, the assignment of the external network’s subnet is made in the External Networks properties dialog as shown in the following figure.\nFigure 27. External Network IP Address Assignment\nThen, after the external network has at least one IP pool assigned, the pool can be sub-allocated to connected Edge Services Gateways. The sub-allocation is carried out in the Edge Services Gateway configuration as shown in the following figure.\nFigure 28. Sub-Allocation of External Network Addresses\nIn this example, the Edge Services Gateway “ACME_GW2” has been assigned the range of addresses from 100.64.67.20 to 100.64.67.29. These addresses are on a connected network, so do not need to be specifically routed to the Edge Services Gateway and therefore do not need to fall on subnet boundaries. Should the tenant require more addresses in the future, they could be added with a subsequent allocation from the IP pool. Should the parent IP Pool become exhausted, it is possible to add another IP pool to the external network from which further sub-allocations can be made, but care should be taken when doing so, because the upstream, gateway device will need to be configured with a secondary interface address, and default gateway and routing configurations become more complex to configure and troubleshoot.\nRouting in a Multitenant Service Provider Environment #  As vCloud Director allows (service provider permitting) customers to create new networks within their tenant Org VDCs, or set up WAN and internet external facing services, there is a requirement to make the addresses in question reachable from external networks. Although it is possible to manage this using static routing, configured on the routing devices within the solution, dynamic routing protocols provide a mechanism to automate the distribution or routing information without the need for manual intervention or complex, bespoke orchestration of routing configuration.\nTenant traffic routing within a service provider environment generally falls into two categories, public internet, and private, per-tenant. Each of these is examined in more detail in the following sections.\nProvider Data Center Internet Routing #  Using the model from Section5.3, Internet Address Management, there are two types of addresses which need to be advertised from the vCloud Director environment to the upstream data center Internet access, and both are subnets allocated to the “Internet” external networks in the earlier section. The “red” shared internet network is directly connected to the upstream router and so is automatically present in that router’s routing table.\nFigure 29. Provider Internet Routing\nInternetShared - Internet external network\n2 Tenant 4 - F/W Inner external network.254 (.253/.252)\nShared Internet 100.64.67.0/24\n.2041\n.30\nTenant 4 – F/W Inner x.x.x.0/27\n.201 .202.203 .29 .249Web Network Web Network Web Network Web Network Web Network\nApp Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Org VDC Tenant 2 Org VDC Tenant 3 Org VDC Tenant 4 Org VDC Tenant n Org VDC Service Provider Data Center\nThe first routing exchange in this figure is the advertisement of the Tenant 4 F/W Inner subnet to the next- hop gateway of the Shared Internet external network. This is necessary because the F/W Inner network is not directly connected to the Shared Internet network and would otherwise be unreachable. The choice of routing protocol used between the dedicated firewall and the upstream router depends upon a number of factors, but typically follow the service provider’s established standard. Some service providers do not run dynamic routing protocols on physical firewalls as a security precaution and, were that to be the case here, a static route would need to be configured on the Shared Internet router directing traffic to the F/W Inner subnet through the “.204” address on the connected, shared network. Similarly, the dedicated firewall would need its default gateway setting to the “.254” address of the upstream router.\nThe second routing exchange would be the advertisement of the Shared Internet subnet (in this example 100.64.67.0/24) to the next-hop Internet router within, or upstream of the provider data center. This would usually be carried out using Border Gateway Protocol (BGP), and the relative Autonomous Systems (AS) within which the two routers sit would determine whether this would be Internal BGP (iBGP) or External BGP (eBGP). After the Shared Internet router establishes a peering relationship with its upstream neighbor (2) it will advertise reachability of the connected Shared Internet subnet and the F/W Inner subnet, which it learned through the dynamic or static routing process in (1).\nWhile not explicitly discussed earlier, it is possible for a customer to use registered internet addressing on an Org VDC network. This might be a range allocated by their service provider, or a Provider Independent Address (PIA) range which the customer already owns. To illustrate this, the usual web network in the Tenant 1 Org VDC in the following figure has been replaced with a routed “DMZ” network. Although not shown, the network would be addresses from a range of public internet addresses, with the Edge Services Gateway interface consuming one address, and the remaining useable addresses allocated to an IP pool for assignment to vApps connected to that network.\nFigure 30. Routed DMZ Org VDC Network\nProvider Data Center Per-Tenant Routing #  As noted in Section5, IP Address Management and Routing, addresses used within tenant Org VDCs can be managed by either the provider or the customer. In the majority of deployments, whoever manages the addresses will do so from the “private” address ranges provided by RFC1918. Even if their usage can be controlled within the provider environment, it is likely that within the customers’ WAN environments, addresses will overlap between customers. For this reason, even when the provider makes sure that addresses within the data center are unique, the need to uniquely route traffic to and from non- unique WAN addresses means that separate routing tables must be maintained for each tenant.\nOne case where this is not required is when the provider uses registered, public internet addresses in the external network NAT layer, which hides tenant Org VDC network addresses completely and only provides external access through the public Internet. In this case, both the tenant (NAT) addresses and the remote connection addresses are globally unique, and a single routing and forwarding table can be shared across all customers using the same mechanisms described in the previous section.\nOverlapping customer addresses are separated by the Org VDC networks whose VXLAN backing creates the same Layer 2 separation as traditional VLAN-backed networks. The only places at which the overlapping addresses could therefore clash is if the separated networks were then connected to shared routing devices. In the examples used throughout this document, each tenant’s Org VDC has a dedicated Edge Services Gateway, and is connected to the respective customer WAN over a discrete vCloud Director external network. This VLAN-backed network typically terminates on a dedicated, per-tenant WAN CE router or a shared multi-tenant PE router in which the each VLAN is internally mapped to per- tenant VRF (as described in Section4.2, vCloud Director Multitenant Data Center Networking in vSphere). The Edge Services Gateway, CE router, or PE VRF maintain independent routing tables, allowing each customer to use identical addresses within their tenant Organizations without affecting other tenants.\nFigure 31. Per-Tenant WAN Router Peering\nWAN Per Tenant\nCE Routers\nTenant 1 WAN Access External Network – VLAN 1001 Tenant n WAN Access External Network – VLAN 10nn\nTenant 2 WAN Access External Network – VLAN 1002\nTenant 3 WAN Access External Network – VLAN 1003\nTenant 4 WAN Access External Network – VLAN 1004\nWeb Network Web Network Web Network Web Network Web Network App Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Org VDC Tenant 2 Org VDC Tenant 3 Org VDC Tenant 4 Org VDC Tenant n Org VDC\nvCloud Director Provider VDC Service Provider Data Center\nThis figure shows the peering between each tenant Org VDC Edge Gateway and that customer’s WAN access router. The Edge Services Gateway will advertise the Org VDC networks to which it is directly connected, to the WAN access router, and from there to the rest of the customer’s WAN. Any new Org VDC networks that are created by the service provider or the customer and which are connected to their respective Edge Services Gateway will also be advertised to their WAN. Because the Edge Services Gateway will typically default route towards the internet, it must learn the address ranges in use on the WAN to reach those destinations. This is carried out over the same routing protocol as that used to advertise the Org VDC networks to the WAN, except in the opposite direction.\nThe Edge Services Gateway supports both OSPF and BGP routing protocols, either of which can be used to peer with a WAN access router.\nIPv6 Considerations #  The current version of vCloud Director cannot manage IPv6 addresses for Tenant devices or networking. Some elements of a customer solution such as the virtual machine guest OS, and the underlying NSX components might offer IPv6 support, but will need to be managed outside of the control of vCloud Director itself. Should customers require IPv6 within their tenant organization, their specific requirements should be assessed to establish if it makes sense for the service provider to accommodate them with a managed service until such time as versions of vCloud Director are released with native support.\nCommercial Considerations #  Managed Service or Self Service #  VMware Managed Service Providers have been responsible for much of the configuration and ongoing management of their customers’ solutions. The opportunities for value-add services throughout the lifecycle of a solution have allowed providers to differentiate their offerings based on their areas of expertise. Cloud services with higher levels of automation and standardization can, in some cases, restrict opportunities to differentiate.\nUsing vCloud Director to offer customers direct access to manage their tenant configuration does not preclude a VMware Cloud Provider from offering additional services to provide differentiation. While it is out of scope for this document, the Role-Based Access Control (RBAC) within vCloud Director allows the granular control of access to many of the capabilities within the vCloud Director User Interface[Most user permissions are managed through the vCloud Director user interface, but some, notably those to do with advanced networking and the distributed firewall must be managed through the vCloud Director API. See the References section for more information. ]. However, as noted earlier, restricting customers’ ability to manage changes themselves can be seen as a shortcoming with the platform. To maximize customer benefits while maintaining the provider’s ability to differentiate, vCloud Director allows both the provider and the customer to access the solution through the same interface. This provides that changes made by either party are consistently applied, and reduces the risk of the customer adversely affecting a solution for which the provider is accountable within a Service Level Agreement.\nThe ability for both the provider and customer to manage the same solution is particularly useful within the networking services part of a provider service, where customers might have in-house skills to manage their business applications which reside on the provider platform, but might not have the networking or security skills to be able to set up a complex micro-segmentation distributed firewall policy. Similarly, if the customer wants to take advantage of NSX Edge load balancing, while they might understand their applications load balancing requirements, they might prefer that the service provider be responsible for procuring, installing, and managing SSL certificates for those same services.\nFigure 32. Managing Certificates in the Edge Services Gateway\nThe certificate management dialog in vCloud Director might be quite straight forward to Content Delivery Engineers who understand signing requests and revocation lists, but customers might be willing to pay for that expertise from their VMware Cloud Provider.\nWhile the management of SSL certificates is just one example, it illustrates that simply by providing customer access to manage part of their service, the provider does not preclude offering to manage those same services for their customer. Even if a customer tries and fails to configure an element of their service themselves, the provider knows that they will be able to access the failed configuration through the same interface that the customer used and either, help the customer to remediate the error themselves, or take over and complete the deployment on the customer’s behalf. In either case, customer satisfaction is assured through offering them self-service, support service, or a managed service, as required.\nAdditional Product Licensing #  Deploying vSphere into a managed hosting environment requires the hosts and their vCenter Server to be appropriately licensed to enable the required feature set. The introduction of vCloud Director and NSX similarly require appropriate licenses. For service providers using the VMware vCloud SP Bundles to license their current estate, vCloud Director is included[Product bundle comparison using the VMware vCloud Air Network Product Usage Guide Q2 CY2017 ] in the 5-point bundle, but this does not include NSX. NSX for Service Providers is available in three different versions depending upon the features required. Those versions are known as NSX-SP Base, NSX-SP Advanced, and NSX-SP Enterprise.\nIf a tenant pod does not use the distributed firewall, dynamic routing or L2VPN connectivity, the Edge Services Gateway (with static routing only) and VXLAN-based networking features are available in the NSX-SP Base edition which is included in the “Advanced” 7-point bundle. To enable the distributed firewall and deliver the benefits of micro-segmentation to the tenant, or add dynamic routing or L2 VPN, the customer’s workloads must be licensed using NSX-SP Advanced which is included in the “Advanced with Networking” 9-point bundle. Should the customer require the integration of externally hosted, physical devices into their VXLAN networks, this would require NSX-SP Enterprise which is included in the “Advanced with Networking and Management” 12-point bundle.\nIt is quite likely that an existing managed hosting provider introducing cloud services will want to offer the service to their existing customer base. The availability of the benefits of NSX such as micro- segmentation does not mean however, that all customers will immediately be increased to a 9-point or 12-point bundle. VMware vCloud Usage Meter can be used to report on multiple tenants who each use different features, allowing the service provider to upsell new capabilities to their existing customer base to increase revenue in line with the increase in license points, rather than having to increase their costs in advance of any incremental revenue being generated to recoup an upfront investment.\nThe following figure illustrates the service provider data center model used earlier with the addition of NSX-SP Advanced or Enterprise in some tenants, while others require only NSX-SP Base with the resulting smaller increase in points consumption there.\nFigure 33. Cloud Service Provider Data Center with Per-Tenant Licensing Options\nInternet WAN Per Tenant CE Routers\nDatacenter Internet L2 / L3 distribution\nWeb Network Web Network Web Network Web Network Web Network App Network App Network App Network App Network App Network Database Network Database Network Database Network Database Network Database Network\nTenant 1 Org VDC Tenant 2 Org VDC Tenant 3 Org VDC Tenant 4 Org VDC Tenant n Org VDC (NSX-SP Base ) (NSX-SP Advanced ) (NSX-SP Base ) (NSX-SP Enterprise (NSX-SP ???? )\nProvider VDC Service Provider Datacenter\nIn this figure, Tenant 1 and Tenant 3 are using the Edge Services Gateway in VMware vCloud Networking and Security™ mode and VXLAN logical networking, features which, together with vCloud Director are available in the “Advanced” 7-point bundle. Tenant 2 is using the Distributed Firewall feature which requires NSX-SP Advanced which in turn requires the “Advanced with Networking” 9-point bundle, whereas (although not shown in the diagram) Tenant 4 is using features that require NSX-SP Enterprise and the “Advanced with Networking and Management” 12-point bundle.\nIt is important to note, that there is no additional points consumption when the service provider makes the features available in a particular location. The increase in points consumption only arises when a service provider’s customer takes the additional services, which also means an increase in revenue for the service provider as a result.\nReferences\nAdditional information pertinent to this document and its topics are listed in the following table.\n| Document Title | Link or URL |\nVMware vCloud Architecture Toolkit for https://www.vmware.com/cloud-computing/cloud- Service Providers** architecture/vcat-sp.html vCloud Architecture Toolkit (vCAT) Blog** https://blogs.vmware.com/vcat/ Architecting a VMware vCloud Director https://www.vmware.com/content/dam/digitalmar Solution for VMware Cloud Providers keting/vmware/en/pdf/vcat/vmware-architecting-\na-vcloud-director-solution.pdf  Customer Onboarding with VMware NSX https://www.vmware.com/content/dam/digitalmar L2VPN Services for the VMware Cloud keting/vmware/en/pdf/vcat/vmware-customer- Provider Program onboarding-with-nsx-l2vpn-services.pdf  NIST Definition of Cloud Computing http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistsp\necialpublication800-145.pdf Forrester Leveraging Micro-Segmentation https://www.vmware.com/ciovantage/article/forre report ster-report-available-zero-trust VMware NSX for vSphere Network https://communities.vmware.com/docs/DOC- Virtualization Design Guide 27683  Using the vCloud API to Grant Distributed https://kb.vmware.com/selfservice/microsites/sea Firewall and Advanced Networking Services rch.do?language=en_US\u0026amp;cmd=displayKC\u0026amp;exter Rights in vCloud Director 8.20 nalId=2149016 Address Allocation for Private Internets https://tools.ietf.org/html/rfc1918  vCAN Product Usage Guide https://vmware.my.salesforce.com/06980000000\nbpky Appendix A: Provisioning an External Network in vCloud Director\nSection3.2, Basic vCloud Director Tenant Topology and Section3.3, Multitenant Networking introduced the concept of an external network that connects resources within the tenant Organization VDCs to resources in the Cloud Service Provider’s data center and beyond. It was noted inTable 2. vCloud Director Tenancy and Network Elements in NSX and vSphere, that because these networks bridge the vCloud Director management domain and the physical data center outside of the vSphere environment, they cannot be created or managed from within vCloud Director alone. The following figure shows the sequence of activities needed to connect a new WAN CE router to an interface on a newly provisioned tenant Edge Services Gateway.\nFigure 34. Adding a New External Network\nInternet WANInternet Port Group (Backed by F/W Access-VLAN)\nWAN Port Group (Backed by CE\nWeb Port Group App Port Group DB Port Group Access-VLAN)\nVLAN VXLAN VXLAN VXLAN VLAN\nvSphere dvSwitch\nWeb Network App Network DB Network\nThis figure shows the vSphere layer of the Tenant networking analysis from Section4.1, Tenant Networking with the vCloud Director external network highlighted. In this example, a new WAN connection will be created between the vSphere environment behind the Provider VDC on which the tenant Org VDC and its Edge Services Gateway are configured. The new network details are listed in the following table.\nTable 3. Appendix A Configuration Parameters\n**Configuration Element Configuration Detail **Tenant WAN access VLAN ID 1011 VLAN Subnet 172.16.11.0/24 WAN CE Interface Address 172.16.11.254 **Configuration Element Configuration Detail **Edge Services Gateway Interface Address 172.16.11.1 Configuration Steps\n Create the new VLAN-backed Distributed Port Group in the PVDC vCenter Server to connect the (already configured within the data center network infrastructure) WAN Access VLAN to the vSphere dvSwitch.   Name and configure the new dvPortGroup.  PAGE46 | VMware vCloud® Architecture Toolkit™ for Service Providers Architecting Tenant Networking with VMware NSX in VMware vCloud Director  After the new dvPortGroup is available in vCenter Server, it can be added as a new External Network within vCloud Director. In the External Networks view in the vCloud Director Manage and Monitor tab, click the green “plus” icon to open the Add Network dialog.   In the Add Network dialog, select the vCenter Server to show available vSphere networks, and select the new ACME_1_WAN network with the correct VLAN next to it.   After the network appears in the lower table, click Next to continue.  PAGE47 | VMware vCloud® Architecture Toolkit™ for Service Providers Architecting Tenant Networking with VMware NSX in VMware vCloud Director  Next configure the IP addressing details for the new network. This allows vCloud Director to understand the gateway address on the WAN CE router and the range of addresses on the new network which it can allocate.  In this example, the pool of addresses which vCloud Director can allocate from has been restricted to addresses between 172.16.11.1 (which will be used for the edge interface address in a later step) and 172.16.11.199. Addresses from 172.16.11.200 – 253 could be added to the range, but are held back so that if the customer runs out of addresses, the provider can release the remainder and offer assistance with expansion.\n Give the external network a name and description and click through to complete the dialog to finish adding the new external network.   External networks are not confined to a single Organization within the Provider VDC in whose vCenter Server they are configured, so the service provider must take care with the next step which presents the new external network to the required Edge Services Gateway. From the Actions menu of the Edge Services Gateway, select Properties.   From the Configure External Networks tab of the Edge Services Gateway’s Properties dialog, select the new external network from the list in the top table of candidate networks and click Add to copy the network into the lower table of connected networks.   On the Configure IP Settings tab, select the Change IP Assignment link on the new external network row to assign the address manually.   In the Change IP Assignment dialog, set the IP Assignment mode to Manual and enter the required interface address.   If the new network is to be the Edge Services Gateway’s default route, the external network should be selected in Configure Default Gateway tab. Because the network is selected, the Default Gateway configured in Step 6 should appear in the right-hand column. After the changes are complete, click OK to close the dialog.   After the infrastructure configuration is complete, the Edge Services Gateway might need additional changes to add extra static routes, configure peering over the new network, firewall rules or NAT entries. These configuration changes are carried out through the Edge Gateway Services option of the gateway’s Actions menu.   And the options are then configured in new tab using the HTML5 interface.  PAGE50 | VMware vCloud® Architecture Toolkit™ for Service Providers "});index.add({'id':7,'href':'/docs/shortcodes/buttons/','title':"Buttons",'section':"Shortcodes",'content':"Buttons #  Buttons are styled links that can lead to local page or external link.\nExample #  {{\u0026lt; button relref=\u0026#34;/\u0026#34; [class=\u0026#34;...\u0026#34;] \u0026gt;}}Get Home{{\u0026lt; /button \u0026gt;}} {{\u0026lt; button href=\u0026#34;https://github.com/alex-shpak/hugo-book\u0026#34; \u0026gt;}}Contribute{{\u0026lt; /button \u0026gt;}}  Get Home  Contribute  "});index.add({'id':8,'href':'/docs/shortcodes/columns/','title':"Columns",'section':"Shortcodes",'content':"Columns #  Columns help organize shorter pieces of content horizontally for readability.\n{{\u0026lt; columns \u0026gt;}} \u0026lt;!-- begin columns block --\u0026gt; # Left Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Mid Content Lorem markdownum insigne... \u0026lt;---\u0026gt; \u0026lt;!-- magic separator, between columns --\u0026gt; # Right Content Lorem markdownum insigne... {{\u0026lt; /columns \u0026gt;}} Example #  Left Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.  Mid Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter!  Right Content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.   "});index.add({'id':9,'href':'/docs/shortcodes/details/','title':"Details",'section':"Shortcodes",'content':"Details #  Details shortcode is a helper for details html5 element. It is going to replace expand shortcode.\nExample #  {{\u0026lt; details \u0026#34;Title\u0026#34; [open] \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} {{\u0026lt; details title=\u0026#34;Title\u0026#34; open=true \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /details \u0026gt;}} Title Markdown content Lorem markdownum insigne\u0026hellip;   "});index.add({'id':10,'href':'/docs/shortcodes/expand/','title':"Expand",'section':"Shortcodes",'content':"Expand #  Expand shortcode can help to decrease clutter on screen by hiding part of text. Expand content by clicking on it.\nExample #  Default #  {{\u0026lt; expand \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Expand ↕  Markdown content Lorem markdownum insigne\u0026hellip;    With Custom Label #  {{\u0026lt; expand \u0026#34;Custom Label\u0026#34; \u0026#34;...\u0026#34; \u0026gt;}} ## Markdown content Lorem markdownum insigne... {{\u0026lt; /expand \u0026gt;}}   Custom Label ...  Markdown content Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.    "});index.add({'id':11,'href':'/docs/shortcodes/hints/','title':"Hints",'section':"Shortcodes",'content':"Hints #  Hint shortcode can be used as hint/alerts/notification block.\nThere are 3 colors to choose: info, warning and danger.\n{{\u0026lt; hint [info|warning|danger] \u0026gt;}} **Markdown content** Lorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa {{\u0026lt; /hint \u0026gt;}} Example #  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  Markdown content\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa  "});index.add({'id':12,'href':'/docs/shortcodes/katex/','title':"Katex",'section':"Shortcodes",'content':"KaTeX #  KaTeX shortcode let you render math typesetting in markdown document. See KaTeX\nExample #  {{\u0026lt; katex [display] [class=\u0026#34;text-center\u0026#34;] \u0026gt;}} f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi {{\u0026lt; /katex \u0026gt;}}     Display Mode Example #  Here is some inline example:  \\(\\pi(x)\\)  , rendered in the same line. And below is display example, having display: block  \\[f(x) = \\int_{-\\infty}^\\infty\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\\,d\\xi\\]  Text continues here.\n"});index.add({'id':13,'href':'/docs/shortcodes/mermaid/','title':"Mermaid",'section':"Shortcodes",'content':"Mermaid Chart #  Mermaid is library for generating svg charts and diagrams from text.\nExample #  {{\u0026lt; mermaid [class=\u0026#34;text-center\u0026#34;]\u0026gt;}} sequenceDiagram Alice-\u0026gt;\u0026gt;Bob: Hello Bob, how are you? alt is sick Bob-\u0026gt;\u0026gt;Alice: Not so good :( else is well Bob-\u0026gt;\u0026gt;Alice: Feeling fresh like a daisy end opt Extra response Bob-\u0026gt;\u0026gt;Alice: Thanks for asking end {{\u0026lt; /mermaid \u0026gt;}}     "});index.add({'id':14,'href':'/docs/shortcodes/section/','title':"Section",'section':"Shortcodes",'content':"Section #  Section renders pages in section as definition list, using title and description.\nExample #  {{\u0026lt; section \u0026gt;}}   Page1   Page 1 #   Page2   Page 2 #   "});index.add({'id':15,'href':'/docs/shortcodes/section/page1/','title':"Page1",'section':"Section",'content':"Page 1 #  "});index.add({'id':16,'href':'/docs/shortcodes/section/page2/','title':"Page2",'section':"Section",'content':"Page 2 #  "});index.add({'id':17,'href':'/docs/shortcodes/tabs/','title':"Tabs",'section':"Shortcodes",'content':"Tabs #  Tabs let you organize content by context, for example installation instructions for each supported platform.\n{{\u0026lt; tabs \u0026#34;uniqueid\u0026#34; \u0026gt;}} {{\u0026lt; tab \u0026#34;MacOS\u0026#34; \u0026gt;}} # MacOS Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Linux\u0026#34; \u0026gt;}} # Linux Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; tab \u0026#34;Windows\u0026#34; \u0026gt;}} # Windows Content {{\u0026lt; /tab \u0026gt;}} {{\u0026lt; /tabs \u0026gt;}} Example #  MacOS MacOS This is tab MacOS content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nLinux Linux This is tab Linux content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\nWindows Windows This is tab Windows content.\nLorem markdownum insigne. Olympo signis Delphis! Retexi Nereius nova develat stringit, frustra Saturnius uteroque inter! Oculis non ritibus Telethusa protulit, sed sed aere valvis inhaesuro Pallas animam: qui quid, ignes. Miseratus fonte Ditis conubia.\n "});})();